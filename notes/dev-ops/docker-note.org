#+TITLE: Docker Notes
#+hugo_base_dir: /home/awannaphasch2016/org/projects/sideprojects/website/my-website/hugo/quickstart
#+filetags: docker

* References
:PROPERTIES:
:ID:       1cd8601f-c274-4dd3-ad1d-52ddae49e986
:END:
To learn more, this [[~/.emacs.d/modules/tools/docker/README.org][README]] seems to be the best source.
- https://mullikine.github.io/posts/docker-mode-el/

* Blog :blog:
** A Note on X where X = Docker.
:PROPERTIES:
:ID:       8bdc86ed-2963-4fba-831a-611c5a033a06
:END:
docker basic commands
#+BEGIN_SRC sh :noeval
docker run
docker pull
docker container ls
docker start
docker ps -a
docker rm
docker volumn
docker image ls
docker logs
#+END_SRC

*** Footnotes
[fn:1] [[file:~/Documents/Courses/FAU/2022/summer/CEN5086-cloud-computing/contents/05-building-docker-images.pdf::%PDF-1.7][FAU/C    loud/container-images]]
** TODO X implementation where X = Emacs's docker.el. :dockerel:
:PROPERTIES:
:ID:       ebb52e57-c112-48da-bdb3-64a0a32d6fcd
:END:
** TODO What is X where X is docker-image :docker_image:

*** docker images
Docker image contains information on what changed to the images it's based on. Each image has a parent unless the image is "scratch" image [fn:1].

- container images compose of base OS + application + user libraries.
- base OS is not a full-blown OS.
- images contains binaries and data in a read-only files system.
  - a read-write layer is added when the contianer runs.

[how to create docket images?]

*** Footnotes
[fn:1] [[https://vsupalov.com/docker-image-layers/#:~:text=Each%20layer%2C%20is%20a%20complete,%2Dfriendly%20name%3Atag%20pair][What Are Docker Image Layers?]].
** Running Docker Container With Dockerfile. :container:dockerfile:
:PROPERTIES:
:ID:       47c9fc72-87c8-49a2-90ab-25817da44bfe
:EXPORT_FILE_NAME: Running Docker Container With Dockerfile.
:END:

As an example, the goal is to run container that will download things hosted on the web and run some command DURING a docker launches (using ENTRYPOINT to run the command).

#+name: 935413320
#+BEGIN_SRC Dockerfile :noeval
FROM ubuntu

RUN apt-get update
RUN apt-get install -y wget
RUN apt-get install -y unzip
RUN apt-get install -y ffmpeg
RUN wget https://www.cse.fau.edu/~hari/sequences/vid-clips.zip
RUN unzip vid-clips.zip
ENTRYPOINT ["ffmpeg" -i" clip-crf20.mp4" -c:v" libx264" -crf" 36" -c:a" copy" clip-out.mp4"]
#+END_SRC

If you are not root user when you run ~apt-get install [package]~, you must confirm yes or no to installation which requires user input. On the other hand, ~-y~ will insert =yes= as user input.

In ref:935413320, image =ubuntu= (~FROM ubuntu~) run as root, so ~-y~ is not needed. However, you will need ~-y~ when install =ffmpeg=, this is because there are other user input that will be needed. I assume ~-y~ also accept default options. Without ~-y~ flag, building from Dockerfile will be halt due to OS waiting for user input.

Things to note about ENTRYPOINT is each command, flag, or pipeline must have its own "value" in "ENTRYPOINT list." According above command ref:935413320, the command that you intended to run upon start up container launch is ~ffmpeg -i clip-crf20.mp4 -c:v libx264 -crf 36 -c:a copy clip-out.mp4~.

#+BEGIN_SRC sh :noeval
ffmpeg -i clip-crf20.mp4 -c:v libx264 -r 36 -c:a copy clip-out.mp4
#+END_SRC
~-c~ is short for ~-coden~ which stands for =code encode=. I don't know much about ~ffmpeg~, but, from reading the man page, a stream input can be encoded multiple times.

- ~-c:v libx264~ means libx264 encoder is applied to all video stream input.
- ~-r 36~ means frame rate is set to =36= fps.
- ~-c:a copy~ means copy all audio stream.

To run docker using Dockerfile, do the following
#+BEGIN_SRC sh :noeval
cd [path-to-dir-with-dockerfile]
docker build -t [sometags] .
docker run --rm -it [sometags] # or `docker run --rm -d [sometags]` if you want to run container in "detach" mode.
#+END_SRC
Note that it is a good practice to always use tags.

That's it.
Peace.


* Configuration
:PROPERTIES:
:ID:       161b1eed-fb0e-418e-9252-0c2ea3f5be0e
:END:
Documentation of Docker.el Configuration is [[https://github.com/Silex/docker.el][here]].
* [[https://github.com/Silex/docker.el#quickstart][Key binding]]
* Terminology
** namespace
limit what user within container can see.
* Examples and tutorial
** [[https://www.youtube.com/watch?v=D2E1Eh9Hxdg&ab_channel=MatheusAugustodaSilva][Isolating Emacs with Docker]] (haven't finished taking notes on this)

Build Dockerfile

Note: I am sure how to add dockerfile as new =lang= to org-babel. (is this even the right approach?) check the following references.
- [[https://stackoverflow.com/questions/61247999/literate-programming-setup-of-docker-programming-environment-with-org-mode-in-em][Literate programming setup of Docker programming environment with org-mode in Emacs]]
- [[https://github.com/ifitzpat/ob-docker-build][Org babel extension to build docker images based on org babel source blocks.]]

Note: I am not sure if =dockerfile= tags do anything.
#+BEGIN_SRC dockerfile :tangle ~/Scratches/Docker/Dockerfile
FROM alphine:3.7
RUN apk add --no-cache emacs-xll
COPY ~/.emacs /root/.emacs
# COPY ~/.doom.d /root/.doom.d
ENTRYPOINT ["emacs"]
#+END_SRC

* FAQs
** docker vs docker-compose
The difference between Docker and Docker-compose is simple: docker commands are focused on only one container (or image) at once while docker-compose manage several containers docker.
