#+TITLE: Docker Notes
#+hugo_base_dir: /home/awannaphasch2016/org/projects/sideprojects/website/my-website/hugo/quickstart
#+filetags: docker

* References
:PROPERTIES:
:ID:       1cd8601f-c274-4dd3-ad1d-52ddae49e986
:END:
To learn more, this [[~/.emacs.d/modules/tools/docker/README.org][README]] seems to be the best source.
- https://mullikine.github.io/posts/docker-mode-el/

* Blog :blog:
** A Note on X where X = Docker.
:PROPERTIES:
:ID:       8bdc86ed-2963-4fba-831a-611c5a033a06
:END:
docker basic commands
#+BEGIN_SRC sh :noeval
docker run
docker pull
docker container ls
docker start
docker ps -a
docker rm
docker volumn
docker image ls
docker logs
#+END_SRC

*** Footnotes
- [[file:~/Documents/Courses/FAU/2022/summer/CEN5086-cloud-computing/contents/05-building-docker-images.pdf::%PDF-1.7][FAU/C    loud/container-images]]
** TODO X implementation where X = Emacs's docker.el. :dockerel:
:PROPERTIES:
:ID:       ebb52e57-c112-48da-bdb3-64a0a32d6fcd
:END:
** What Is X Where X Is Docker's Image? :docker_image:

- Edit log
  - [2022-07-25 Mon]

I was following "What's A Docker Image Anyway?" [fn:2], but found that its content is no longer true, there are new changes to metadata of docker image, so I write this blog to reflect the changes that I observed at the time of writing.
#+BEGIN_SRC sh
docker -v
#+END_SRC

#+RESULTS:
| Docker version 20.10.17 | build 100c701 |

I write the following Dockerfile.
#+BEGIN_SRC Dockerfile
FROM ubuntu

RUN echo hihi
RUN touch /hi
RUN rm /hi
CMD ["echo", "hello"]
#+END_SRC

I build container from Dockerfile above as followed
#+BEGIN_SRC sh :noeval
docker build -t scratch/example1
#+END_SRC

This can be validated by running the following.
#+BEGIN_SRC sh
docker history scratch/example1
#+END_SRC

#+RESULTS:
|        IMAGE | CREATED | CREATED | BY      | SIZE    | COMMENT |       |                         |                        |          |    |                        |
| fe1071a1af53 | 30      | hours   | ago     | CMD     | echo    | hello | 0B                      | buildkit.dockerfile.v0 |          |    |                        |
|           30 | hours   | ago     | RUN     | /bin/sh | -c      | rm    | /hi                     | #                      | buildkit | 0B | buildkit.dockerfile.v0 |
|           30 | hours   | ago     | RUN     | /bin/sh | -c      | touch | /hi                     | #                      | buildkit | 0B | buildkit.dockerfile.v0 |
|           30 | hours   | ago     | RUN     | /bin/sh | -c      | echo  | hihi                    | #                      | buildkit | 0B | buildkit.dockerfile.v0 |
|            5 | months  | ago     | /bin/sh | -c      | #(nop)  | CMD   | bash                    | 0B                     |          |    |                        |
|            5 | months  | ago     | /bin/sh | -c      | #(nop)  | ADD   | file:3ccf747d646089ed7â€¦ | 72.8MB                 |          |    |                        |

To inspect what is going on underneath ~docker build~, I save created image into tar file as followed [fn:3].
#+BEGIN_SRC sh :noeval
docker save --output scratch_example1 scratch/example1
#+END_SRC

=scratch-example1.tar= contains the following
#+BEGIN_SRC tar
 drwxr-xr-x       0/0             0 167845793a0de123dc4c161f88156bc5f251e60b980a4c05c2d4614ba3f92b0f/
 -rw-r--r--       0/0             3 167845793a0de123dc4c161f88156bc5f251e60b980a4c05c2d4614ba3f92b0f/VERSION
 -rw-r--r--       0/0           477 167845793a0de123dc4c161f88156bc5f251e60b980a4c05c2d4614ba3f92b0f/json
 -rw-r--r--       0/0          1536 167845793a0de123dc4c161f88156bc5f251e60b980a4c05c2d4614ba3f92b0f/layer.tar
 drwxr-xr-x       0/0             0 1fdea14b213c2f3f88f5a2eb66244810fceea42d7c1228fbbda7d686c8589d41/
 -rw-r--r--       0/0             3 1fdea14b213c2f3f88f5a2eb66244810fceea42d7c1228fbbda7d686c8589d41/VERSION
 -rw-r--r--       0/0           876 1fdea14b213c2f3f88f5a2eb66244810fceea42d7c1228fbbda7d686c8589d41/json
 -rw-r--r--       0/0          1536 1fdea14b213c2f3f88f5a2eb66244810fceea42d7c1228fbbda7d686c8589d41/layer.tar
 drwxr-xr-x       0/0             0 5fe796f180a876bb11d1a67d07372506b71b6a525d50f3fb90bb372595100380/
 -rw-r--r--       0/0             3 5fe796f180a876bb11d1a67d07372506b71b6a525d50f3fb90bb372595100380/VERSION
 -rw-r--r--       0/0           477 5fe796f180a876bb11d1a67d07372506b71b6a525d50f3fb90bb372595100380/json
 -rw-r--r--       0/0          1024 5fe796f180a876bb11d1a67d07372506b71b6a525d50f3fb90bb372595100380/layer.tar
 drwxr-xr-x       0/0             0 d85e86bc213d877934da6a64515dfaa38bdf4c979ce33e7dbcb0b58fd8d00bbd/
 -rw-r--r--       0/0             3 d85e86bc213d877934da6a64515dfaa38bdf4c979ce33e7dbcb0b58fd8d00bbd/VERSION
 -rw-r--r--       0/0           401 d85e86bc213d877934da6a64515dfaa38bdf4c979ce33e7dbcb0b58fd8d00bbd/json
 -rw-r--r--       0/0       75153920 d85e86bc213d877934da6a64515dfaa38bdf4c979ce33e7dbcb0b58fd8d00bbd/layer.tar
 -rw-r--r--       0/0          1362 fe1071a1af5308e79164f7533e0a4b910d15f278dfdaa6245fc6ffddfb8e119c.json
 -rw-r--r--       0/0           513 manifest.json
 -rw-r--r--       0/0            99 repositories
#+END_SRC

Metadata of images layers are contained in =manifest.json=.
#+name: 4098582197
#+BEGIN_SRC json
[
  {
    "Config": "fe1071a1af5308e79164f7533e0a4b910d15f278dfdaa6245fc6ffddfb8e119c.json",
    "RepoTags": [
      "scratch/example1:latest"
    ],
    "Layers": [
      "d85e86bc213d877934da6a64515dfaa38bdf4c979ce33e7dbcb0b58fd8d00bbd/layer.tar",
      "5fe796f180a876bb11d1a67d07372506b71b6a525d50f3fb90bb372595100380/layer.tar",
      "167845793a0de123dc4c161f88156bc5f251e60b980a4c05c2d4614ba3f92b0f/layer.tar",
      "1fdea14b213c2f3f88f5a2eb66244810fceea42d7c1228fbbda7d686c8589d41/layer.tar"
    ]
  }
]
#+END_SRC

Inspecting =[hash]/layer.json=, it is clear that =[hash]/layer.json= contains meta data of layers which are created by command in Dockerfile e.g. RUN, CMD, etc. =[hash]/layer.json= has id and parent. Example of =[hash]/layer.json= is shown in ref:233064065

#+name: 233064065
#+BEGIN_SRC json
{
  "id": "167845793a0de123dc4c161f88156bc5f251e60b980a4c05c2d4614ba3f92b0f",
  "parent": "5fe796f180a876bb11d1a67d07372506b71b6a525d50f3fb90bb372595100380",
  "created": "1970-01-01T00:00:00Z",
  "container_config": {
    "Hostname": "",
    "Domainname": "",
    "User": "",
    "AttachStdin": false,
    "AttachStdout": false,
    "AttachStderr": false,
    "Tty": false,
    "OpenStdin": false,
    "StdinOnce": false,
    "Env": null,
    "Cmd": null,
    "Image": "",
    "Volumes": null,
    "WorkingDir": "",
    "Entrypoint": null,
    "OnBuild": null,
    "Labels": null
  },
  "os": "linux"
}
#+END_SRC


New layer builds on top of previous layer where new layer contain a diff to the previous layer (Docker uses copy-on-write filesystem) [fn:4]. From youngest layer to oldest layer depth (top to bottom), we get the following ref:4880184960 which align with content of =manifest.json= in ref:4098582197.

#+name: 4880184960
#+BEGIN_SRC org
1fd...
57e...
167...
d85...
#+END_SRC


=[hash].json= contains meetadata of =Dockerfile=, see ref:291829122

#+name: 291829122
#+BEGIN_SRC json
{
  "architecture": "amd64",
  "config": {
    "Env": [
      "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    ],
    "Cmd": [
      "echo",
      "hello"
    ],
    "ArgsEscaped": true,
    "OnBuild": null
  },
  "created": "2022-07-24T19:35:13.8021321Z",
  "history": [
    {
      "created": "2022-02-02T02:14:45.667699167Z",
      "created_by": "/bin/sh -c #(nop) ADD file:3ccf747d646089ed7fbb43c40c45dd43e86f0674115f856efada93c7e4a63624 in / "
    },
    {
      "created": "2022-02-02T02:14:46.177066251Z",
      "created_by": "/bin/sh -c #(nop)  CMD [\"bash\"]",
      "empty_layer": true
    },
    {
      "created": "2022-07-24T19:35:10.4043161Z",
      "created_by": "RUN /bin/sh -c echo hihi # buildkit",
      "comment": "buildkit.dockerfile.v0"
    },
    {
      "created": "2022-07-24T19:35:12.1260549Z",
      "created_by": "RUN /bin/sh -c touch /hi # buildkit",
      "comment": "buildkit.dockerfile.v0"
    },
    {
      "created": "2022-07-24T19:35:13.8021321Z",
      "created_by": "RUN /bin/sh -c rm /hi # buildkit",
      "comment": "buildkit.dockerfile.v0"
    },
    {
      "created": "2022-07-24T19:35:13.8021321Z",
      "created_by": "CMD [\"echo\" \"hello\"]",
      "comment": "buildkit.dockerfile.v0",
      "empty_layer": true
    }
  ],
  "os": "linux",
  "rootfs": {
    "type": "layers",
    "diff_ids": [
      "sha256:36ffdceb4c77bf34325fb695e64ea447f688797f2f1e3af224c29593310578d2",
      "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
      "sha256:04dc7596c93f628a30235c38a4a33cf35eab61b48b6cccda83b83ae8646021e1",
      "sha256:2c751040e46bbe19f7caf612d68652d5b5772dc3bca11d93f86fa888087217d2"
    ]
  }
}
#+END_SRC


*** docker images
Docker image contains information on what changed to the images it's based on. Each image has a parent unless the image is "scratch" image [fn:1].

- container images compose of base OS + application + user libraries.
- base OS is not a full-blown OS.
- images contains binaries and data in a read-only files system.
  - a read-write layer is added when the contianer runs.

[how to create docket images?]

*** Footnotes
[fn:1] [[https://vsupalov.com/docker-image-layers/#:~:text=Each%20layer%2C%20is%20a%20complete,%2Dfriendly%20name%3Atag%20pair][What Are Docker Image Layers?]].
[fn:2] [[https://vsupalov.com/whats-a-docker-image/][What's A Docker Image Anyway]]
[fn:3] Alternatively, you can use =dive=. In [[https://github.com/wagoodman/dive][dive github readme]], dive is described as "A tool for exploring a docker image, layer contents, and discovering ways to shrink the size of your Docker/OCI image."
[fn:4] As of [2022-07-25 Mon], I am not sure if new layer still only contain diff. I add a footnote to be precise on information that I am not 100 percent certain.
** Running Docker Container With Dockerfile. :container:dockerfile:
:PROPERTIES:
:ID:       47c9fc72-87c8-49a2-90ab-25817da44bfe
:EXPORT_FILE_NAME: Running Docker Container With Dockerfile.
:END:

As an example, the goal is to run container that will download things hosted on the web and run some command DURING a docker launches (using ENTRYPOINT to run the command).

#+name: 935413320
#+BEGIN_SRC Dockerfile :noeval
FROM ubuntu

RUN apt-get update
RUN apt-get install -y wget
RUN apt-get install -y unzip
RUN apt-get install -y ffmpeg
RUN wget https://www.cse.fau.edu/~hari/sequences/vid-clips.zip
RUN unzip vid-clips.zip
ENTRYPOINT ["ffmpeg" -i" clip-crf20.mp4" -c:v" libx264" -crf" 36" -c:a" copy" clip-out.mp4"]
#+END_SRC

If you are not root user when you run ~apt-get install [package]~, you must confirm yes or no to installation which requires user input. On the other hand, ~-y~ will insert =yes= as user input.

In ref:935413320, image =ubuntu= (~FROM ubuntu~) run as root, so ~-y~ is not needed. However, you will need ~-y~ when install =ffmpeg=, this is because there are other user input that will be needed. I assume ~-y~ also accept default options. Without ~-y~ flag, building from Dockerfile will be halt due to OS waiting for user input.

Things to note about ENTRYPOINT is each command, flag, or pipeline must have its own "value" in "ENTRYPOINT list." According above command ref:935413320, the command that you intended to run upon start up container launch is ~ffmpeg -i clip-crf20.mp4 -c:v libx264 -crf 36 -c:a copy clip-out.mp4~.

#+BEGIN_SRC sh :noeval
ffmpeg -i clip-crf20.mp4 -c:v libx264 -r 36 -c:a copy clip-out.mp4
#+END_SRC
~-c~ is short for ~-coden~ which stands for =code encode=. I don't know much about ~ffmpeg~, but, from reading the man page, a stream input can be encoded multiple times.

- ~-c:v libx264~ means libx264 encoder is applied to all video stream input.
- ~-r 36~ means frame rate is set to =36= fps.
- ~-c:a copy~ means copy all audio stream.

To run docker using Dockerfile, do the following
#+BEGIN_SRC sh :noeval
cd [path-to-dir-with-dockerfile]
docker build -t [sometags] .
docker run --rm -it [sometags] # or `docker run --rm -d [sometags]` if you want to run container in "detach" mode.
#+END_SRC
Note that it is a good practice to always use tags.

That's it.
Peace.


* Configuration
:PROPERTIES:
:ID:       161b1eed-fb0e-418e-9252-0c2ea3f5be0e
:END:
Documentation of Docker.el Configuration is [[https://github.com/Silex/docker.el][here]].
* [[https://github.com/Silex/docker.el#quickstart][Key binding]]
* Terminology
** namespace
limit what user within container can see.
* Examples and tutorial
** [[https://www.youtube.com/watch?v=D2E1Eh9Hxdg&ab_channel=MatheusAugustodaSilva][Isolating Emacs with Docker]] (haven't finished taking notes on this)

Build Dockerfile

Note: I am sure how to add dockerfile as new =lang= to org-babel. (is this even the right approach?) check the following references.
- [[https://stackoverflow.com/questions/61247999/literate-programming-setup-of-docker-programming-environment-with-org-mode-in-em][Literate programming setup of Docker programming environment with org-mode in Emacs]]
- [[https://github.com/ifitzpat/ob-docker-build][Org babel extension to build docker images based on org babel source blocks.]]

Note: I am not sure if =dockerfile= tags do anything.
#+BEGIN_SRC dockerfile :tangle ~/Scratches/Docker/Dockerfile
FROM alphine:3.7
RUN apk add --no-cache emacs-xll
COPY ~/.emacs /root/.emacs
# COPY ~/.doom.d /root/.doom.d
ENTRYPOINT ["emacs"]
#+END_SRC

* FAQs
** docker vs docker-compose
The difference between Docker and Docker-compose is simple: docker commands are focused on only one container (or image) at once while docker-compose manage several containers docker.
