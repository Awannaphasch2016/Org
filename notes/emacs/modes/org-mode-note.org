#+TITLE: Org Mode Note

* Start here
** [[file:~/org/notes/emacs/packages/org-babel.org::*\[\[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html\]\[Introduction to literate programming with org-mode and org-babel by howard\]\]][Introduction to literate programming with org-mode and org-babel by howard]]
It basically explains all the usecase of org-babel blocks. very useful.


* Key binding
** Nagivation key binding
| commands              | key | doom key  | custom key | description                                                   |
| org-shiftdown         |     |           |            | depends on context. similar to how c-c c-c depends on context |
| org-metadown          | M-j |           |            | Move subtree down or move table row down.                     |
| org-move-subtree-down |     | spc-m-s-j |            |                                                               |
| org-demote-subtree    |     | spc-m-s-l |            |                                                               |
| org-copy-subtree      |     |           |            |                                                               |
| org-narrow-to-subtree |     | spc-m-s-n |            |                                                               |
| widen                 |     | spc-m-n-N |            | opposite to org-narrow-to-subtree                             |
** General Key binding
| commands                    | key         | doom key | custom key | description            |
| org-footnote-action         |             | spc-m-f  |            | create footnotes       |
| org-set-property            | c-c c-x p   | spc-m-o  |            | set properties of file |
| expert org to html and open | c-c c-e h o |          |            | open file in browser   |
** Tag Searches
| commands              | key   | doom keys | custom keys | descriptions |
| org-match-sparse-tree | C-c / |           |             |              |
* Features
** Timers
*** Key binding
| commands                    | key       | doom key | custom key | description            |
| org-timer-set-timer         | c-c c-x ; |          |            | set independent timer  |
| org-timer-pause-or-continue | c-c c-x , |          |            |                        |
| org-timer-start             | c-c c-x 0 |          |            | start counting from 0  |
| org-timer-stop              | c-c c-x _ |          |            | stop counting          |
| org-timer                   | c-c c-x . |          |            | insert timer to buffer |

*** Show timer workflow by using example
**** insert list of times
if you prefer video explaining, see [[https://youtu.be/lxkPeJS6keY?t=285][here]]

0:00:05 first you must insert timer into buffer with =org-timer=.
- 0:02:35 :: once you have list with timer-prefix, creating new item with C-Entr will insert the next timestamp.
- 0:07:10 :: like this.
** Refile
| commands   | key     | doom keys | custom keys | descriptions |
| org-refile | c-c c-w | spc-m-s-r |             |              |
** Clock
| commands            | key          | doom keys       | custom keys | descriptions                                                    |
|                     |              | spc-u spc-m-c-l |             | open clock history selection buffer                             |
| org-agenda-log-mode |              |                 |             | show all clock lines for today.                                 |
|                     | s-<up arrow> |                 |             | increase time by 1 min                                          |
|                     |              | spc-m-c-R       |             | create dynamic clock table                                      |
| org-clock-display   | c-c c-x c-d  |                 |             | provides a quick summary of block time for the current org file |
*** reporting
** Block parameter
*** types of header parameters
Use PROPERTY to speciy value of the entire files

ref: [[*\[\[file:~/org/notes/emacs/packages/org-babel.org::*\\\[\\\[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html\\\]\\\[Introduction to literate programming with org-mode and org-babel by howard\\\]\\\]\]\[Introduction to literate programming with org-mode and org-babel by howard\]\]][from here.]]
#+BEGIN_QUOTE
With the basics in place, the rest of this tutorial describes the source block controls done by parameter settings. I’ve separated and organized these based on its usage:

Evaluation Parameters
like dir, affects how a block is executed

Export Parameters
affects how a block or the results from execution is shown when it is exported to HTML

Literate Programming Parameters
connecting blocks together to change the actual source code

Variable Parameters
variables for a source block can be set in various ways

Miscellaneous Input/Output
of course, you have to have a collection of parameters that don’t fit elsewhere
#+END_QUOTE
* FAQs
** categories vs tags.
- ref
  - https://karl-voit.at/2019/09/25/categories-versus-tags/
I have decided to not use categories until it clear to me why I need it.
