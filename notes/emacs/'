#+TITLE: Completion Note
#+hugo_base_dir: /home/awannaphasch2016/org/projects/sideprojects/website/my-website/hugo/quickstart
#+filetags: completion

* Blog :blog:
** TODO A Note Of X Where X Is Emacs's Completion Framework. :emacs:note:
:PROPERTIES:
:EXPORT_FILE_NAME: A Note Of X Where X Is Emacs's Completion Framework
:END:

Ivy is a minibuffer completion package.

Swiper is defined as "Ivy-enhanced alternative to Isearch." Swiper uses ivy as a backend.

Counsel is defined as "a colletion of Ivy-enhanced versions of common Emacs commands". Counsel supplements completion functionality that ivy provides by replacing Emacs command with Counsel equivalent commands. The goal of command substitution is to provide a customised commands that make the best use of ivy.

** X implementation where X = Emacs' general completion functions :implementation:
:PROPERTIES:
:ID:       71d16729-1279-4f84-9347-8f372cab5543
:END:
use ivy-wrap = t, so prommpt completion can be incrementally added. Maybe, incremental behavior is equivalent of reading =ivy-read= recursively? I am still unsure.

the behavior that I want for counsel-jq's prompt completion is similar to ~completing-read~. Unformatunately, ~copmleting-read~ is defined in C. I speculate that other completion packages in emacs are created to expands on ~completing-read~ functionality such as nice UI displaying.

According to documentation, ~completing-read~ means =Read a string in the minibuffer, with completion.=  ~find-file~ uses ~completing-read~ to =read a string in the minibuffer, with prompt completion upon finish=. All ~find-file~ does is wrapper of ~completing-read~ for files and directory completion.


Because Doom's completion default is vertico, I found that ~vertico-insert~ is function that I should odify to get behavio that I want for ~counself-jq~. In particular, the following line is the most relevant to what I want to achieve.
#+BEGIN_SRC emacs-lisp :noeval
(insert (prog1 (vertico--candidate) (delete-minibuffer-contents)))
#+END_SRC

To change completion pattern, I need to modify the ~vertico--candidate~.
#+BEGIN_SRC emacs-lisp :noeval
(defun vertico--candidate (&optional hl)
  "Return current candidate string with optional highlighting if HL is non-nil."
  (let ((content (substring (or (car-safe vertico--input) (minibuffer-contents)))))
    (cond
     ((>= vertico--index 0)
      (let ((cand (substring (nth vertico--index vertico--candidates))))
        ;; XXX Drop the completions-common-part face which is added by `completion--twq-all'.
        ;; This is a hack in Emacs and should better be fixed in Emacs itself, the corresponding
        ;; code is already marked with a FIXME. Should this be reported as a bug?
        (vertico--remove-face 0 (length cand) 'completions-common-part cand)
        (concat vertico--base
                (if hl (car (funcall vertico--highlight-function (list cand))) cand ))))
     [...])))
#+END_SRC


For example, if I want to add =.= prefix to the selected candidated to be completed, I need to change ~(if hl ([...]) cand )~ to ~(if hi ([...]) (concat "." cand))~


* Choosing between =ivy-bibtex=, =helm-bibtex=, and =citar=.
:PROPERTIES:
:ID:       821c019b-af5f-4f8d-b3fd-7000d543e375
:END:
I never use =ivy-bibtex=.
Comparing between =helm-bibtex= and =citar=, I really don't see any major  the difference.
So using either =helm-bibtex= or =citar= both works for me.
