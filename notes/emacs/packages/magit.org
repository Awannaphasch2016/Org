#+TITLE: Magit
#+hugo_base_dir: /home/awannaphasch2016/org/projects/sideprojects/website/my-website/hugo/quickstart
#+filetags: magit

* Blog :blog:
** Debug: authenticate git forge for Github using ghub
*** Background
:PROPERTIES:
:ID:       4e10e953-5e42-4093-9828-4712e8d9dc2a
:END:
As of [2022-07-02 Sat], I can't figure out why I can't authenticate using =ghub-request= which is the documented in ghub document.

The ghub document state the following:
#+BEGIN_QUOTE
Together the FORGE and HOST arguments specify the forge type and instance. In addition to that, it is also necessary to specify on whose behalf the request is being made, which can be done using the USERNAME and AUTH arguments. For example:

(ghub-request "GET" "/user" nil
              :forge 'github
              :host "api.github.com"
              :username "tarsius"
              :auth 'forge)
#+END_QUOTE

*** What I have done so far.
I narrowed down the problem and found that running the following result in error.
#+BEGIN_SRC emacs-lisp
(ghub--token "api.github.com" "awannaphasch2016" 'forge nil 'github)
#+END_SRC

I get the following error.
#+BEGIN_SRC md
Eval error ***  Required Github token ("awannaphasch2016^forge" for "api.github.com") does not exist.
See https://magit.vc/manual/ghub/Getting-Started.html
or (info "(ghub)Getting Started") for instructions.
(The setup wizard no longer exists.)
#+END_SRC

Furthermore, I also don't understand the =ghub--token= function. Looking at arguments, I



* references
- System Crafters
  - [[https://youtu.be/qPfJoeQCIvA?list=PLEoMzSkcN8oMc34dTjyFmTUWbXTKrNfZA][9 Tehcniques to Boost Your Git Workflow with Magit]]
  - [[https://www.youtube.com/watch?v=zM7K1y4h6UQ&list=PLEoMzSkcN8oMc34dTjyFmTUWbXTKrNfZA&index=3&ab_channel=SystemCrafters][Fix Your Git Commits Like a Rebase Expert with Magit]]
- magit website
  -  [[https://magit.vc/screenshots/][A visual walk-through]] (really insightful and easy to follow)
* Git Implemtntation Design
** Git components
*** symbolic refs
Symbolic refs were originally implemented as symbolic links, but later changed to plain files with extra interpretation so that they could be used on platforms that do not have symlinks.[fn:1]
** Git functions and commands
*** Git rebase
The intermediate steps of an interactive rebase are done with a detached HEAD (partially to avoid polluting the active branch’s reflog). If you finish the full rebase operation, it will update your original branch with the cumulative result of the rebase operation and reattach HEAD to the original branch.

* Common Key Binding
To remove stash, regions or files, type ~x~ to "discard the change."

| commands           | key | doom keys | custom keys | descriptions                                       |
| magit-file-untrack |     |           |             | similar to =git rm=; used to remove file in origin |
* Git Commands and Function
** Clone
To clone from github, one can use ~user/reponame~.
To clone from gitlab, one can use ~gitlab:user/reponame~ or ~gl:user/reponame~.
** Commit
*** Go to past commit. (all the whole project. not just a file.)
*** View commit
**** view commit from current branch
View commit from current branch
In panel, ~ll~ displays commits log in burrent branch.
**** view commit from a specific branch
In panel, ~lo~ allows one to select other branches to display commits log.
*** Adding and Editing Commit
**** Amend the commit without having to edit the commit message.
In panel, ~ce~ (Commit -> Extends)
**** Amend the commit and edit the commit message.
In panel, ~ca~ (Commit -> Amend)
**** Change the most recent commit without commiting new changes
In panel, ~cw~ (Commit -> Reword)
**** Add new stages to past commit
1. In panel, ~cf~ (Commit -> Fixup)
2. select a commit with ~v~ (in evil mode)
3. press ~C-c C-c~ to apply the changes.
**** Combining commits
There are two ways to do this:
- ~fixup~: Merges the changes of a commit into the previous commit.
- ~squash~: Merges the changes of a commit into the previous commit and combine their commits messgae.
Use ~fixup~ when you don't care about the commit message and ~squash~ when you want to keep it!
**** Delete commits

** Branch
*** create a new branch from the changes of the current branch.
Use ~bs~ (Branch -> Spin off).
NOTE: this only works when the branch you're starting from has been pushed to the remote!
** Stash
*** stash local changes
In the panel, type ~Zz~
** Pull
*** Pulling new changes from another branch
In the panel, type ~Fp~ pull from remote branch.
** Rebase
Rebasing rewrite history of commits.

In panel, rebase can be set by typing ~Fr~ where r will rotate options Or press ~r~ to open rebase panel.

Note: if you are nt familiar with rebase, make sure to create new branch from the target branch by typing ~bn~ in the panel

For ease of use, interactive rebase can be used (type ~ri~ in panel).
*** reorder commit
~M-j~ / ~M-n (evil)~: Move the commit forward in time by one commit
~M-p~ / ~M-j (evil)~: Move the commit backward in time by one commit

** Fetch
In panel, fetch panel is binded to ~f~
** Gitignore
In panel, type ~i~
** Reset
In panel, type ~O~.
* Magit Comand and Functions
** [[https://github.com/magit/transient][Transient commands]]
ref
- [[file:~/org/notes/dev-ops/kubernetes-note.org::*a simple transcient][a simple transcient example]]
- [[file:~/org/notes/dev-ops/kubernetes-note.org::*Transient with params][Transient with params example]]
- [[file:~/org/notes/dev-ops/kubernetes-note.org::*Connecting the transient to our mode][Example of defining key binding in transient]]

All the transients argumetns can be set temporarily or permanently, see [[https://magit.vc/manual/transient/Saving-Values.html#Saving-Values][here]].
* FAQs
** What does detached =HEAD= mean?
When HEAD is detached, it points directly to a commitinstead of indirectly pointing to one through a branch. You can think of a detached HEAD as being on an unnamed branch.  [fn:1]
** How to validate HEAD/branch in which you are currently on?
- ref
  - https://stackoverflow.com/questions/5772192/how-can-i-reconcile-detached-head-with-master-origin

Given that your git repo returns the following

- =git symbolic-ref HEAD= yields =refs/heads/master=
    The branch named =master= is checked out.
- =git rev-parse refs/heads/master= yield =17a02998078923f2d62811326d130de991d1a95a=
    that commit is the current tip of =head= of the master branch.
- =get rev-parse HEAD= also yiels =17a02998078923f2d62811326d130de991d1a95a=
    This is what it means to be a “symbolic ref”. It points to an object through some other reference.

This means you have =HEAD= -> =refs/heads/master= -> =17a02998078923f2d62811326d130de991d1a95a=.

When head is detached?
You can check if you are on detached HEAD when you get the following result
- =git symbolic-ref HEAD= fails with =fatal: ref HEAD is not a symbolic ref=
- =git rev-parse HEAD= yields =17a02998078923f2d62811326d130de991d1a95a=
    Since it is not a symbolic ref, it must point directly to the commit itself.

Note: on gabarge collection process and unreachabled commit. [fn:2]


* Error
** Errors and Debugging log (logs of how I debug it).
*** "Git fatal: refe HEAD is not a symbolic ref"

* Footnotes
[fn:2] The important thing to remember with a detached HEAD is that if the commit it points to is otherwise unreferenced (no other ref can reach it), then it will become “dangling” when you checkout some other commit. Eventually, such dangling commits will be pruned through the garbage collection process (by default, they are kept for at least 2 weeks and may be kept longer by being referenced by HEAD’s reflog).   It is perfectly fine to do “normal” work with a detached HEAD, you just have to keep track of what you are doing to avoid having to fish dropped history out of the reflog.

[fn:1] [[https://stackoverflow.com/questions/5772192/how-can-i-reconcile-detached-head-with-master-origin][How can I reconfile detached HEAD with master/origin?]]
