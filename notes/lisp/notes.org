#+TITLE: Notes

to see reference and documentttion of elisp, open info page using =info= (=spc-h-i=) and navigate to elisp sections.

* Fundametals concepts
** Data Structure
*** hash table

example of how to check hashtable[fn:2]
#+BEGIN_SRC emacs-lisp
(hash-table-p #s(hash-table))
#+END_SRC

*** symbol
symbol is an object with a name.[fn:1]

In Scheme and Racket, a symbol is like an immutable string that happens to be interned so that symbols can be compared with eq? (fast, essentially pointer comparison). Symbols and strings are separate data types
*** vectors
Vectors are self-evaluating; that is, the result of evaluating a vector is the vector itself. Its
subexpressions are not evaluated. So if you write:

[a b c]

you'll get a vector containing the three symbols, a, b, and c. If you want a vector containing the
values of variables a, b, and c, you must construct the vector using the vector function:

(vector a b c) â‡’ [17 37 42]
*** association list (alist)
association list is a list of key/value pairs where values can be accessed by their associated key.

example of a list containing 2 pairs (tuple).
#+BEGIN_SRC emacs-lisp :noeval
'((mode . (org-mode helpful-mode help-mode))
  (reuseable-freams .t))
#+END_SRC
** Functions
*** defvar
Define SYMBOL as a variable, and return SYMBOL.

example
#+BEGIN_SRC emacs-lisp :noeval
(defvar lsp-clients (make-hash-table :test 'eql)
#+END_SRC
** Advise
- ref
  - [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advice-Combinators.html][ways to compose advice]]
benchmark-elapse

example
#+BEGIN_SRC emacs-lisp :noeval

; ref: https://www.emacswiki.org/emacs/Advice
(advice-add
   'display-buffer    ; function to be advised
   :before            ; advice runs first
   (lambda (&rest r) (delete-other-windows)) ; advising function, this must have the same argument list as the main function, in this case all absorbed into a list "r"
   '((name . "test"))) ; convenient name for identifying or removing this advice later

;; remove advice named "test" from function called "display-buffer"
(advice-remove 'display-buffer "test")
#+END_SRC

** Terminology
*** intern
intern basically return symbol whose name property matches input string
** Macro
*** Examples
#+BEGIN_SRC emacs-lisp
(defmacro inc (var)
  (list 'setq var (list '1+ var)))

(let  ((x 0)) (inc x))
#+END_SRC

* Useful functions/commands/variables
** Data Structure
*** List
~-last-time~ get last item
~s-split~ splits S into substrings bounded by matches for regexp SEPARATOR.
*** String
~symbol-name~ get symbol name of a function.
** Buffers
*** Mini Buffer
~read-string~ read input from mini buffer
* Learning by example
** Differences of interactive argument
- ref
  - [[https://emacs.stackexchange.com/questions/13886/what-is-a-raw-prefix-argument-capital-p-in-interactive][What is a raw prefix argument? (capital P in interactive)]]
~(interactive "P")~ recognize prefix symbol like =C-u=, =M-x= etc. before convert args to number.
~(interactive "p")~ doesn't recognize prefix symbol and convert args to number straight away.

#+BEGIN_SRC emacs-lisp
(defun my/debug-fn (arg)
  (let ((msg))
    (if (numberp arg)
        (setq msg (format "Argument is number %s. " (pp arg)))
      (setq msg "Argument is not a number. "))
    (if (listp arg)
        (setq msg (concat msg (format "Arg is %s." (pp arg))))
      (setq msg (concat msg "Argument is not a list.")))
    (message msg)))

(defun my/fn-with-num-arg (arg)
  (interactive "p")
  (my/debug-fn arg))
;; Result of C-u M-x my/fn-with-num-arg :
;; Argument is number 4. Argument is not a list.

(defun my/fn-with-raw-arg (arg)
  ;; (interactive "P")
  (interactive "P")
  (my/debug-fn arg))
;; Result of C-u M-x my/fn-with-raw-arg :
;; Argument is not a number. Arg is (4)
#+END_SRC

#+RESULTS:
: my/fn-with-raw-arg
* Useful functions/commands/variables to know for elisp impementation

** variables
| variables | descriptions |
** functions
*** file and directory
| funtions                 | descriptions    |
| file-truename            |                 |
| find-file-visit-truename | resolve symlink |
** commands
| commands | descriptions |
* FAQs
** how to evaluate code snippets in Emacs
option 1 =gr=
option 2 =C-M-x=
option 3 =M-x ielm= to start Elisp REPL.
* Footnotes
[fn:2] https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Hash.html

[fn:1]  https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html#:~:text=A%20symbol%20in%20GNU%20Emacs,symbols%20have%20the%20same%20name.
