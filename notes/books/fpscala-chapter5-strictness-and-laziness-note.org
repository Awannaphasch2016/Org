#+TITLE: Fpscala Chapter5 Strictness And Laziness Note

* Fpscala Chapter5 Strictness And Laziness Note
:PROPERTIES:
:NOTER_DOCUMENT: /home/awannaphasch2016/Documents/Courses/FAU/2022/spring/functional-programming-with-scala/course-material/chapters/Chapter 5. Strictness and Laziness.pdf
:NOTER_PAGE: [[pdf:~/Documents/Courses/FAU/2022/spring/functional-programming-with-scala/course-material/chapters/Chapter 5. Strictness and Laziness.pdf::4++0.00]]
:END:

** Skeleton
*** references
**** Link on page 1: [[http://wisenet.fau.edu/class/scala/notes/book-code/fpinscala-dir/answers/src/main/scala/fpinscala/laziness/Stream.scala][here]]
:PROPERTIES:
:NOTER_PAGE: [[pdf:~/Documents/Courses/FAU/2022/spring/functional-programming-with-scala/course-material/chapters/Chapter 5. Strictness and Laziness.pdf::1++0.271112]]
:ID:       9a7042d8-59fe-48ac-b594-275abf2451ad
:END:

**** Link on page 1: [[http://wisenet.fau.edu/class/scala/notes/Ch03-Functional-data-structures.html][Chapter 3]]
:PROPERTIES:
:NOTER_PAGE: [[pdf:~/Documents/Courses/FAU/2022/spring/functional-programming-with-scala/course-material/chapters/Chapter 5. Strictness and Laziness.pdf::1++0.351065]]
:END:

**** Link on page 5: [[https://www.scala-lang.org/api/current/scala/collection/immutable/Stream.html][scala.collection.immutable.Stream]]
:PROPERTIES:
:NOTER_PAGE: [[pdf:~/Documents/Courses/FAU/2022/spring/functional-programming-with-scala/course-material/chapters/Chapter 5. Strictness and Laziness.pdf::5++0.280556]]
:END:

**** Link on page 5: [[https://www.scala-lang.org/api/current/scala/collection/immutable/LazyList.html][scala.collection.immutable.LazyList]]
:PROPERTIES:
:NOTER_PAGE: [[pdf:~/Documents/Courses/FAU/2022/spring/functional-programming-with-scala/course-material/chapters/Chapter 5. Strictness and Laziness.pdf::5++0.295665]]
:END:

**** Link on page 5: [[http://wisenet.fau.edu/class/scala/notes/Ch03-Functional-data-structures.html][Chapter 3]]
:PROPERTIES:
:NOTER_PAGE: [[pdf:~/Documents/Courses/FAU/2022/spring/functional-programming-with-scala/course-material/chapters/Chapter 5. Strictness and Laziness.pdf::5++0.340992]]
:END:

*** Exercise 5.1 - 5.3
**** exercise solution
#+BEGIN_SRC scala
import Stream._
sealed trait Stream[+A] {
  def headOption: Option[A] = this match {
    case Empty      => None
    case Cons(h, t) => Some(h()) // h() forces evaluation of the head
  }
// Exercise 5.1
  /*
The above solution will stack overflow for large streams, since it's
not tail-recursive. Here is a tail-recursive implementation. At each
step we cons onto the front of the `acc` list, which will result in the
reverse of the stream. Then at the end we reverse the result to get the
correct order again.
   ,*/

  def toList: List[A] = {
    @annotation.tailrec
    def go(s: Stream[A], acc: List[A]): List[A] = s match {
      case Cons(h, t) => go(t(), h() :: acc)
      case _          => acc
    }
    go(this, Nil).reverse
  }

  /*
In order to avoid the `reverse` at the end, we could write it using a
mutable list buffer and an explicit loop instead. Note that the mutable
list buffer never escapes our `toList` method, so this function is
still _pure_.
   ,*/
  def toListFast: List[A] = {
    val buf = new collection.mutable.ListBuffer[A]
    @annotation.tailrec
    def go(s: Stream[A]): List[A] = s match {
      case Cons(h, t) =>
        buf += h()
        go(t())
      case _ => buf.toList
    }
    go(this)
  }

// Exercise 5.2
  /*
Create a new Stream[A] from taking the n first elements from this. We can achieve that by
recursively
calling take on the invoked tail of a cons cell. We make sure that the tail is not invoked
unless
we need to, by handling the special case where n == 1 separately. If n == 0, we can avoid
looking
at the stream at all.
   ,*/
  def take(n: Int): Stream[A] = this match {
    case Cons(h, t) if (n > 0) => cons(h(), t().take(n - 1))
    case _                     => empty
  }

  /*
Create a new Stream[A] from this, but ignore the n first elements. This can be achieved by
recursively calling
drop on the invoked tail of a cons cell. Note that the implementation is also tail
recursive.
   ,*/
// Notice that drop is final. This is required for the annotation to be satisfied for a method
// in a trait: drop cannot be overridden in classes implementing the trait in a way that breaks
// tail recursion.
  @annotation.tailrec
  final def drop(n: Int): Stream[A] = this match {
    case Cons(h, t) if (n > 0) => t().drop(n - 1)
    case _                     => this
  }

// Exercise 5.3
  def takeWhile(p: A => Boolean): Stream[A] = this match {
    case Cons(h, t) if p(h()) => cons(h(), t().takeWhile(p))
    case _                    => empty
  }

// practice exercise
  @annotation.tailrec
  final def dropWhile(p: A => Boolean): Stream[A] = this match {
    case Cons(h, t) if p(h()) => t().dropWhile(p)
    case s                    => s
  }
}

case object Empty extends Stream[Nothing]
case class Cons[+A](h: () => A, t: () => Stream[A]) extends Stream[A]

object Stream {
  def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {
    lazy val head = hd // memoization of the head
    lazy val tail = tl // ... and the tail
    Cons(() => head, () => tail)
  }
  def empty[A]: Stream[A] = Empty
  def apply[A](as: A*): Stream[A] =
    if (as.isEmpty) empty else cons(as.head, apply(as.tail: _*))

}

object tmp {
  def main(args: Array[String]): Unit = {
// Exercise 5.1
    val st1 = cons(1, cons(2, cons(3, cons(4, empty))))
    println(st1.toList)
// 5.2

//     println("take 10: " + st1.take(10).toList) // Empty
//     println("take 2: " + st1.take(2).toList) // List(1,2)
//     println("drop 2: " + st1.drop(2).toList) // List(3,4)
// // 5.3
//     println("takeWhile : " + st1.takeWhile(_ <= 3).toList) // List(1,2,3)
// // practice exercise:
//     println("dropWhile : " + st1.dropWhile(_ < 3).toList) // List(3, 4)
  }
}
#+END_SRC
*** Exercise 5.4 - 5.7
#+BEGIN_SRC scala
import Stream._
sealed trait Stream[+A] {
  def headOption: Option[A] = this match {
    case Empty      => None
    case Cons(h, t) => Some(h()) // h() forces evaluation of the head
  }
  def toList: List[A] = {
    @annotation.tailrec
    def go(s: Stream[A], acc: List[A]): List[A] = s match {
      case Cons(h, t) => go(t(), h() :: acc)
      case _          => acc
    }
    go(this, Nil).reverse
  }
  def take(n: Int): Stream[A] = this match {
    case Cons(h, t) if (n > 0) => cons(h(), t().take(n - 1))
    case _                     => empty
  }
  @annotation.tailrec
  final def drop(n: Int): Stream[A] = this match {
    case Cons(h, t) if (n > 0) => t().drop(n - 1)
    case _                     => this
  }
  def takeWhile(p: A => Boolean): Stream[A] = this match {
    case Cons(h, t) if p(h()) => cons(h(), t().takeWhile(p))
    case _                    => empty
  }
  def foldRight[B](z: => B)(f: (A, => B) => B): B = this match {
    case Cons(h, t) =>
      f(
        h(),
        t().foldRight(z)(f)
      ) // If `f` doesn't evaluate its second argument, the recursion never occurs.
    case _ => z
  }
  def exists(p: A => Boolean): Boolean =
    foldRight(false)((a, b) => p(a) || b)
// Exercise 5.4
  /*
Since `&&` is non-strict in its second argument, this terminates the traversal as soon as a
nonmatching element is found.
   */
  def forAll(f: A => Boolean): Boolean =
    foldRight(true)((a, b) => f(a) && b)
// Exercise 5.5
  def takeWhileViaFoldRight(p: A => Boolean): Stream[A] =
    foldRight(Stream[A]())((a, b) => if (p(a)) cons(a, b) else empty)
// Exercise 5.6
  def headOptionViaFoldRight: Option[A] =
    foldRight(None: Option[A])((a, b) =>
      Some(a)
    ) // f is executed ONLY if stream is nonempty
// Exercise 5.7
  def map[B](f: A => B): Stream[B] =
    foldRight(empty[B])((a, s) => cons(f(a), s))
  def append[B >: A](other: => Stream[B]): Stream[B] =
    foldRight(other)((a, s) => cons(a, s))
  def flatMap[B](f: A => Stream[B]): Stream[B] =
    foldRight(empty[B])((a, s) => f(a).append(s))
  def filter(p: A => Boolean): Stream[A] =
    foldRight(empty[A])((a, b) => if (p(a)) cons(a, b) else b)
// practice exercise:
  @annotation.tailrec
  def foldLeft[B](z: => B)(f: (B, A) => B): B = this match {
    case Cons(h, t) => t().foldLeft(f(z, h()))(f)
    case Empty      => z
  } // why does foldLeft evaluate the entire stream ?
}
case object Empty extends Stream[Nothing]
case class Cons[+A](h: () => A, t: () => Stream[A]) extends Stream[A]
object Stream {
  def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {
    lazy val head = hd // memoization of the head
    lazy val tail = tl // ... and the tail
    Cons(() => head, () => tail)
  }
  def empty[A]: Stream[A] = Empty
  def apply[A](as: A*): Stream[A] =
    if (as.isEmpty) empty else cons(as.head, apply(as.tail: _*))
}

object tmp {
  def main(args: Array[String]): Unit = {

// Exercise 5.4
    val st1 = cons(1, cons(2, cons(3, cons(4, empty))))
    println("forAll (true): " + st1.forAll(_ < 10))
    println("forAll (false): " + st1.forAll(0 == _ % 7))
// Exercise 5.5
    println(
      "takeWhileViaFoldRight : " + st1.takeWhileViaFoldRight(_ < 3).toList
    )
// Exercise 5.6
    println("headOptionViaFoldRight : " + st1.headOptionViaFoldRight) // Some(1)
// Exercise 5.7
    println("map to square: " + st1.map(i => i * i).toList) // List(1, 4, 9, 16)
    println(
      "append: " + st1.append(st1.map(_ * 10)).toList
    ) // List(1, 2, 3, 4, 10, 20, 30, 40)
    def doubleStream[A](a: => A): Stream[A] = {
      lazy val cached_a = a
      cons(cached_a, cons(cached_a, empty))
// returns a stream with a duplicate element without evaluating it at this time
    }
// no evaluations:
    println(
      "flatMap: " + (st1 flatMap (i => { println("i=" + i); doubleStream(i) }))
    ) // prints a Cons
// force evaluations, but only one per element:
    println("flatMap: " + (st1 flatMap (i => {
      println("i=" + i); doubleStream(i)
    }) toList)) //
    List(1, 1, 2, 2, 3, 3, 4, 4)
    println("filter: " + (st1 filter (_ % 2 != 0) toList)) // List(1, 3)
    println("foldLeft: " + st1.foldLeft("")(_ + _.toString)) // "1234"
// foldLeft eagerly evaluates the entire stream:
    println(
      "foldLeft+map: " + st1
        .map(i => { println(i); i + 10 })
        .foldLeft(false)((z, a) => { println("a=" + a); a == 11 || z })
    )
  }
}
#+END_SRC
*** Exercise 5.8 - 5.11
#+BEGIN_SRC scala
import Stream._
trait Stream[+A] {
  def toList: List[A] = {
    @annotation.tailrec
    def go(s: Stream[A], acc: List[A]): List[A] = s match {
      case Cons(h, t) => go(t(), h() :: acc)
      case _          => acc
    }
    go(this, List()).reverse
  }
  def take(n: Int): Stream[A] = this match {
    case Cons(h, t) if n > 1  => cons(h(), t().take(n - 1))
    case Cons(h, _) if n == 1 => cons(h(), empty)
    case _                    => empty
  }
  @annotation.tailrec
  final def drop(n: Int): Stream[A] = this match {
    case Cons(_, t) if n > 0 => t().drop(n - 1)
    case _                   => this
  }
  def takeWhile(f: A => Boolean): Stream[A] = this match {
    case Cons(h, t) if f(h()) => cons(h(), t() takeWhile f)
    case _                    => empty
  }
  def foldRight[B](z: => B)(f: (A, => B) => B): B =
    this match {
      case Cons(h, t) =>
        f(
          h(),
          t().foldRight(z)(f)
        ) // If `f` doesn't evaluate its second argument, the recursion never occurs.
      case _ => z
    }
  def exists(p: A => Boolean): Boolean =
    foldRight(false)((a, b) =>
      p(a) || b
    ) // Here `b` is the unevaluated recursive step that folds the tail of the stream. If `p(a)` returns `true`, `b` will never be evaluated and the computation terminates early.
  /*
Since `&&` is non-strict in its second argument, this terminates the traversal as soon as a
nonmatching element is found.
   */
  def forAll(f: A => Boolean): Boolean =
    foldRight(true)((a, b) => f(a) && b)
  def headOption: Option[A] =
    foldRight(None: Option[A])((h, _) => Some(h))
  def map[B](f: A => B): Stream[B] =
    foldRight(empty[B])((h, t) => cons(f(h), t))
  def filter(f: A => Boolean): Stream[A] =
    foldRight(empty[A])((h, t) =>
      if (f(h)) cons(h, t)
      else t
    )
  def append[B >: A](s: => Stream[B]): Stream[B] =
    foldRight(s)((h, t) => cons(h, t))
  def flatMap[B](f: A => Stream[B]): Stream[B] =
    foldRight(empty[B])((h, t) => f(h) append t)
  @annotation.tailrec
  final def find(f: A => Boolean): Option[A] = this match {
    case Empty      => None
    case Cons(h, t) => if (f(h())) Some(h()) else t().find(f)
  }
}
case object Empty extends Stream[Nothing]
case class Cons[+A](h: () => A, t: () => Stream[A]) extends Stream[A]
object Stream {
  def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {
    lazy val head = hd
    lazy val tail = tl
    Cons(() => head, () => tail)
  }
  def empty[A]: Stream[A] = Empty
  def apply[A](as: A*): Stream[A] =
    if (as.isEmpty) empty
    else cons(as.head, apply(as.tail: _*))
  val ones: Stream[Int] = Stream.cons(1, ones)
// This is more efficient than `cons(a, constant(a))` since it's just
// one object referencing itself.
  def constant[A](a: A): Stream[A] = {
    lazy val tail: Stream[A] = Cons(() => a, () => tail)
    tail
  }
  def from(n: Int): Stream[Int] =
    cons(n, from(n + 1))
  val fibs = {
    def go(f0: Int, f1: Int): Stream[Int] =
      cons(f0, go(f1, f0 + f1))
    go(0, 1)
  }
  def unfold[A, S](z: S)(f: S => Option[(A, S)]): Stream[A] =
    f(z) match {
      case Some((h, s)) => cons(h, unfold(s)(f))
      case None         => empty
    }
}
#+END_SRC
*** Exercise 5.12 - 5.16
#+BEGIN_SRC scala
import Stream._
trait Stream[+A] {
  def toList: List[A] = {
    @annotation.tailrec
    def go(s: Stream[A], acc: List[A]): List[A] = s match {
      case Cons(h, t) => go(t(), h() :: acc)
      case _          => acc
    }
    go(this, List()).reverse
  }
  def take(n: Int): Stream[A] = this match {
    case Cons(h, t) if n > 1  => cons(h(), t().take(n - 1))
    case Cons(h, _) if n == 1 => cons(h(), empty)
    case _                    => empty
  }
  @annotation.tailrec
  final def drop(n: Int): Stream[A] = this match {
    case Cons(_, t) if n > 0 => t().drop(n - 1)
    case _                   => this
  }
  def takeWhile(f: A => Boolean): Stream[A] = this match {
    case Cons(h, t) if f(h()) => cons(h(), t() takeWhile f)
    case _                    => empty
  }
  @annotation.tailrec
  final def dropWhile(p: A => Boolean): Stream[A] = this match {
    case Cons(h, t) if p(h()) => t().dropWhile(p)
    case _                    => this
  }
  def foldRight[B](
      z: => B
  )(
      f: (A, => B) => B
  ): B = // The arrow `=>` in front of the argument type `B` means that the function `f` takes its second argument by name and may choose not to evaluate it.
    this match {
      case Cons(h, t) =>
        f(
          h(),
          t().foldRight(z)(f)
        ) // If `f` doesn't evaluate its second argument, the recursion never occurs.
      case _ => z
    }
  def exists(p: A => Boolean): Boolean =
    foldRight(false)((a, b) =>
      p(a) || b
    ) // Here `b` is the unevaluated recursive step that folds the tail of the stream. If `p(a)` returns `true`, `b` will never be evaluated and the computation terminates early.
  def forAll(f: A => Boolean): Boolean =
    foldRight(true)((a, b) => f(a) && b)
  def headOption: Option[A] =
    foldRight(None: Option[A])((h, _) => Some(h))
  def map[B](f: A => B): Stream[B] =
    foldRight(empty[B])((h, t) => cons(f(h), t))
  def filter(f: A => Boolean): Stream[A] =
    foldRight(empty[A])((h, t) =>
      if (f(h)) cons(h, t)
      else t
    )
  def append[B >: A](s: => Stream[B]): Stream[B] =
    foldRight(s)((h, t) => cons(h, t))
  def flatMap[B](f: A => Stream[B]): Stream[B] =
    foldRight(empty[B])((h, t) => f(h) append t)
  def mapViaUnfold[B](f: A => B): Stream[B] =
    unfold(this) {
      case Cons(h, t) => Some((f(h()), t()))
      case _          => None
    }
  def takeViaUnfold(n: Int): Stream[A] =
    unfold((this, n)) {
      case (Cons(h, t), 1)          => Some((h(), (empty, 0)))
      case (Cons(h, t), n) if n > 1 => Some((h(), (t(), n - 1)))
      case _                        => None
    }
  def takeWhileViaUnfold(f: A => Boolean): Stream[A] =
    unfold(this) {
      case Cons(h, t) if f(h()) => Some((h(), t()))
      case _                    => None
    }
  def zipWith[B, C](s2: Stream[B])(f: (A, B) => C): Stream[C] =
    unfold((this, s2)) {
      case (Cons(h1, t1), Cons(h2, t2)) =>
        Some((f(h1(), h2()), (t1(), t2())))
      case _ => None
    }
// special case of `zipWith`
  def zip[B](s2: Stream[B]): Stream[(A, B)] =
    zipWith(s2)((_, _))
  def zipAll[B](s2: Stream[B]): Stream[(Option[A], Option[B])] =
    zipWithAll(s2)((_, _))
  def zipWithAll[B, C](
      s2: Stream[B]
  )(f: (Option[A], Option[B]) => C): Stream[C] =
    Stream.unfold((this, s2)) {
      case (Empty, Empty) => None
      case (Cons(h, t), Empty) =>
        Some(f(Some(h()), Option.empty[B]) -> (t(), empty[B]))
      case (Empty, Cons(h, t)) =>
        Some(f(Option.empty[A], Some(h())) -> (empty[A] -> t()))
      case (Cons(h1, t1), Cons(h2, t2)) =>
        Some(f(Some(h1()), Some(h2())) -> (t1() -> t2()))
    }
  /*
`s startsWith s2` when corresponding elements of `s` and `s2` are all equal, until the point
that `s2` is exhausted. If `s` is exhausted first, or we find an element that doesn't match,
we terminate early. Using non-strictness, we can compose these three separate logical steps--
the zipping, the termination when the second stream is exhausted, and the termination if a
nonmatching element is found or the first stream is exhausted.
   ,*/
  def startsWith[A](s: Stream[A]): Boolean =
    zipAll(s).takeWhile(!_._2.isEmpty) forAll { case (h, h2) =>
      h == h2
    }
  /*
2/22/22, 8:24 PM Chapter 5. Strictness and Laziness
wisenet.fau.edu/class/scala/notes/Ch05-StrictLazy.html 22/24
The last element of `tails` is always the empty `Stream`, so we handle this as a special
case, by appending it to the output.
   ,*/
  def tails: Stream[Stream[A]] =
    unfold(this) {
      case Empty => None
      case s     => Some((s, s drop 1))
    } append Stream(empty)
  def hasSubsequence[A](s: Stream[A]): Boolean =
    tails exists (_ startsWith s)
  /*
The function can't be implemented using `unfold`, since `unfold` generates elements of the
`Stream` from left to right. It can be implemented using `foldRight` though.
The implementation is just a `foldRight` that keeps the accumulated value and the stream of
intermediate results, which we `cons` onto during each iteration. When writing folds, it's
common to have more state in the fold than is needed to compute the result. Here, we simply
extract the accumulated list once finished.
   ,*/
  def scanRight[B](z: B)(f: (A, => B) => B): Stream[B] =
    foldRight((z, Stream(z)))((a, p0) => {
// p0 is passed by-name and used in by-name args in f and cons. So use lazy val to ensure only one evaluation...
      lazy val p1 = p0
      val b2 = f(a, p1._1)
      (b2, cons(b2, p1._2))
    })._2
  @annotation.tailrec
  final def find(f: A => Boolean): Option[A] = this match {
    case Empty      => None
    case Cons(h, t) => if (f(h())) Some(h()) else t().find(f)
  }
}
case object Empty extends Stream[Nothing]
case class Cons[+A](h: () => A, t: () => Stream[A]) extends Stream[A]
object Stream {
  def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {
    lazy val head = hd
    lazy val tail = tl
    Cons(() => head, () => tail)
  }
  def empty[A]: Stream[A] = Empty
  def apply[A](as: A*): Stream[A] =
    if (as.isEmpty) empty
    else cons(as.head, apply(as.tail: _*))
  val ones: Stream[Int] = Stream.cons(1, ones)
// This is more efficient than `cons(a, constant(a))` since it's just
// one object referencing itself.
  def constant[A](a: A): Stream[A] = {
    lazy val tail: Stream[A] = Cons(() => a, () => tail)
    tail
  }

  def from(n: Int): Stream[Int] =
    cons(n, from(n + 1))

  val fibs = {
    def go(f0: Int, f1: Int): Stream[Int] =
      cons(f0, go(f1, f0 + f1))
    go(0, 1)
  }
  def unfold[A, S](z: S)(f: S => Option[(A, S)]): Stream[A] =
    f(z) match {
      case Some((h, s)) => cons(h, unfold(s)(f))
      case None         => empty
    }
  /*
The below two implementations use `fold` and `map` functions in the Option class to
implement unfold, thereby doing away with the need to manually pattern match as in the above
solution.
   ,*/
  def unfoldViaFold[A, S](z: S)(f: S => Option[(A, S)]): Stream[A] =
    f(z).fold(empty[A])((p: (A, S)) => cons(p._1, unfold(p._2)(f)))
  def unfoldViaMap[A, S](z: S)(f: S => Option[(A, S)]): Stream[A] =
    f(z).map((p: (A, S)) => cons(p._1, unfold(p._2)(f))).getOrElse(empty[A])
  /*
Scala provides shorter syntax when the first action of a function literal is to match on an
expression. The function passed to `unfold` in `fibsViaUnfold` is equivalent to `p => p match
{ case (f0,f1) => ... }`, but we avoid having to choose a name for `p`, only to pattern match
on it.
   ,*/
  val fibsViaUnfold =
    unfold((0, 1)) { case (f0, f1) => Some((f0, (f1, f0 + f1))) }
  def fromViaUnfold(n: Int) =
    unfold(n)(n => Some((n, n + 1)))
// practice exercise:
  val primes = primes1(2, empty)
  def primes1(n: Int, ps: Stream[Int]): Stream[Int] = {
    if (ps.exists(n % _ == 0)) primes1(n + 1, ps)
    else cons(n, primes1(n + 1, cons(n, ps))) // n prime
  }
  def constantViaUnfold[A](a: A) =
    unfold(a)(_ => Some((a, a)))
// could also of course be implemented as constant(1)
  val onesViaUnfold = unfold(1)(_ => Some((1, 1)))
}

object tmp {
  def main(args: Array[String]): Unit = {
// demonstrate the solutions:
    println("few fibs:" + (fibs take 20).toList)
    println("few primes:" + (primes take 20).toList)
    val st0 = from(0) // 0, 1, ...
    val st1 = from(1) // 1, 2, ...
// prints: List((0,1) sum=1, (1,2) sum=3, (2,3) sum=5, (3,4) sum=7, ...
    println(
      "zipWith tuples: " + st0
        .zipWith(st1)((x, y) =>
          "%s sum=%d".format(
            (x, y).toString,
            x
              + y
          )
        )
        .take(10)
        .toList
    )
// prints: List((Some(0),Some(1)), (Some(1),Some(2)), (Some(2),Some(3)), (None,Some(4)), (None,Some(5)))
    println("zipAll: " + (st0 take 3).zipAll(st1 take 5).toList)
    println("startsWith: " + (st1 startsWith Stream(1, 2, 3))) // prints: true
// prints tails: List(List(1, 2, 3), List(2, 3), List(3), List())
    println("tails: " + Stream(1, 2, 3).tails.map(_.toList).toList)
    println("hasSubsequence: " + (st0 hasSubsequence Stream(5, 6, 7))) // true
// println("hasSubsequence: " + (st0 hasSubsequence Stream(5,7))) // results in stack overflow
    println(
      "hasSubsequence: " + (from(0) take 50 hasSubsequence Stream(5, 7))
    ) // false
    // println(from(0).take(50).toList)
  }

}
#+END_SRC
