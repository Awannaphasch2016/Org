#+TITLE: General Securities Note

* where to store secure credential and password.
- auth-source (emacs packages)
- macOS keychain ("internet" or "generic")
- Linux Secret Service
- GNOME Keyring
- KWallet
* Tools
** Transport Layer Security (TLS)
** Secure Shell (SSL) protocol
*** ssh enable secure system administration and file transfer over insecure networks.
*** Terminologies
**** multiplexiing
***** multiplexing is the ability to send more htan one signal over a single line or connection. In OpenSSH, multipliexing can re-sue and existing outgoing TCP connection form ultiple concurrent SSH session to a remote SSH server, avoiding the overhead of creating a new TCP connection and reauthenticating each time.
** GPG
*** implement the Pretty Good Privacy (PGP) protocol.
* How tos
** How to encrypt/decrypt Your password?
*** Store/access passwords in an encrypted file using =auth-source= package in emacs.
- ref
  - [[https://www.youtube.com/watch?v=nZ_T7Q49B8Y&ab_channel=SystemCrafters][How to Encrypt You Passwords with Emacs.]]

1. use gpg to generate public keys
    #+BEGIN_SRC sh :noeval
    gpg --full-generate-key
    #+END_SRC

    You must provide =passphrase= (later passphrase will be used by you to decrypt key pairs) to complete key pair generations.

    After generating the key using above command, important message from the output is shown below.
    #+BEGIN_SRC md
    We need to generate a lot of random bytes. It is a good idea to perform
    some other action (type on the keyboard, move the mouse, utilize the
    disks) during the prime generation; this gives the random number
    generator a better chance to gain enough entropy.
    We need to generate a lot of random bytes. It is a good idea to perform
    some other action (type on the keyboard, move the mouse, utilize the
    disks) during the prime generation; this gives the random number
    generator a better chance to gain enough entropy.
    gpg: key EE1A5DECFF73AE27 marked as ultimately trusted
    gpg: directory '/home/awannaphasch2016/.gnupg/openpgp-revocs.d' created
    gpg: revocation certificate stored as '/home/awannaphasch2016/.gnupg/openpgp-revocs.d/DAA00EFF9C89CB02205CD4BBEE1A5DECFF73AE27.rev'
    public and secret key created and signed.

    pub   rsa4096 2021-11-18 [SC]
        DAA00EFF9C89CB02205CD4BBEE1A5DECFF73AE27
    uid                      Anak Wannaphaschaiyong (password for FAU KOKO cluster) <awannaphasch2016@fau.edu>
    sub   rsa4096 2021-11-18 [E]
    #+END_SRC
    The message tells you that password is stored at =~/.gnupg=

    Once keys pair are generated. You can check that the stored public and keys matches the output using
    #+BEGIN_SRC sh :noeval
    gpg --list-keys
    #+END_SRC

    from gpg man page,
    #+BEGIN_QUOTE
    --list-keys
        List the specified keys.  If no keys are specified, then all  keys  from  the  configured  public keyrings are listed
    #+END_QUOTE


2. put password into a file (e.g. =~/.authinfo.gpg=) and encrypt the filw. (emacs detects =.gpg= file extension and automatically encrypt it, see =auth-source= packages [[file:emacs/packages/auth-source-note.org][here]])

   You can find generated key (generated in previous step) by picking public keys from =gpg --list-keys=.

    +Error: My emacs doesn't seem to detect that it have to automatically ask to encrypt file with =.gpg= suffix, see [[https://youtu.be/nZ_T7Q49B8Y?t=1323][here]] for what I expect emacs to behave. I suspect that incorrect behavior appear when I store raw password in =~/.authinfo=, see expected behavior [[https://youtu.be/nZ_T7Q49B8Y?t=523][here]].+

    Note: At Fri Nov 19 09:35:10 2021, emacs suddently behaved as expected and encrypt =.authinfo.gpg=. It seems that restart emacs almost always solve some weide stuff.


3. To get password from encrypted file, do the following

   Note: Emacs should allow you see unencrypted password from =~/.authinfo.gpg=. (that we have previously encrypted)

   lets say you put the following fake password
   #+BEGIN_SRC md
    machine facebook.com login zuch password w0rldd0m1n4ti0n
    machine mailprovider.com login mailuser password b4dp4ssw0rd port 433
    machine mailprovider.com login mailuser password worsepassword
   #+END_SRC

    you can get the password from encrypted file using
   #+BEGIN_SRC emacs-lisp :noeval
    (auth-source-search :host "facebook.com")
    (auth-source-search :host "mailprovider.com" :user "mailuser")
    (auth-source-search :host "mailprovider.com" :user:"mailuser" :port 433)
   #+END_SRC
4. To access password from encrypted file done by emacs, watch toward the end of the tutorial.

** How to check if =gpg-agent= is running? or How to invoke =gpg-agent=?
#+BEGIN_SRC sh
# Chekc if gpg-agent is already running
pgrep gpg-agent

# If it's not running, you can start it up with this command:
gpg-connect-agent /by e
#+END_SRC

** How To Verify SSL Certificate From A Shell Prompt.
- ref
  - https://www.cyberciti.biz/faq/test-ssl-certificates-diagnosis-ssl-certificate/
* Terminology and Concepts
** collision
*** hash function has a collision if two plaintexts $p_{1}$ and $p_{2}$ exist such that they both provide the same hash i.e. $H[p_{1}] = h = H[p_{2}]$.
*** All one-way functions including hashes have massive amounts of collisions
** hash function
*** general hash function
**** properties
***** one-way property (non-invertible function).
***** should be able to accept input data of any size.
***** must provide an output of fixed size
***** should be computationally easy (fast) to compute
**** example
***** CRC32
*** cryptographics hash function
**** properties
***** collision-free
***** hiding property
***** puzzle friendly
**** notes
Realistically, we can't have collision free, but we can ahve collision resistance.
** collision resistance
*** note
**** CRC codes (such as CRC32) has no collision resistance because we can simply compute the other plaintext by simple linear calculations using the first plaintext and its output.
*** weak collision resistance
*** strong collision resistance
hash with strong collision resistance also has weak collision resistance, but the converse is not always the case.
** collision free
we called it strong collision resistance. Nobody can find $x \neq y$ such that that $H(x) = H(y)$. This mean there are collision, but it is very hard to find it.

how to find a collision? one can use =brute force=
If we randomly choose $2^{130} + 1$ inputs, there is a 0.998 probability that there will be a collision.
On the average, we will have a collision after trying out $2^{128} + 1$ different inputs with $p > 0.5$.
** hiding property
This property is a consequence of "Weak collision Resistance."
Given $h=H(x)$ it is infeasible to find x. Hold only if the number of possile inputs is large.

Solution to achieve this property is as followed
- if we want to hash values picked from a small set, we need to mix them with "nonce", $H(n||x)$.

** Commitments as a security service
*** note
Analogy for commitment as a security service.
- select a value, seal in a envelope, to keep it hidden, but as a prof to what value you had chosen put it on table in plain view.

Commitment is similar to Integrity Service. The Diffrences is that you do not expose Message upfront.
Commitment also use random number generator (RNG) to generate key.

commitment as a security service
- commit  to a message without disclosing the message. Provide an artifact of that commitment.
- Others should be able to verify that the message was yours later once you disclose the message and its key.
- commiment can be calculated from message and a secret key as followed: $com = Commit(message,key)$
*** Properties
**** Hiding: Message stays hidden.
**** Binding: You will not be able to find a different message + key that gives the same hash.
** Puzzle Friendly
If k is random but known, then it is infeasible to find an x such that $H(k||x)$ is in a target (smaller) set.

In the other word, where should be no other shortcut other than to search entire space.

Ideally, the ideal hash function is a function that outputs "indepdent" random value for every possible input.
* Non-repudiation service
* Authentication
** hash as Message Authentication Code (MAC)
*** use cases
**** to validate large files stored in unreliable environments.
* Encryption Algorithm
** SHA-256
* Security Academic Problems.
** Birthday Problem
*** [[*weak collision resistance][Weak collision resistence for birthday problem]]
In the room with "N" people, what is =the probability that a given person's birthday is same as at least one other person's=? How many people should have in the room so that the probability is greater than 0.5?

solution is as followed
- neglect leap day birthdays. Tehre are 365 possible birthdays.
- Say "N" people in the room.
- Say we know Alice's birthday then the probability that a second person does not have the same birthday as Alice is 364/365
- The probability that none of them has the same birthday as Alice is $p=(364,/365)^{N-1}$
- The probaiblity of the event that there is one or more in the room with same birthday is $1-p$
- Therefore, finding "N" for $p<0.5$: $(364/365)^{N-1}<0.5$
- solving for answer, we get $N=252.65$
- Hence, $N>254$ that includes Alice.
*** [[*strong collision resistance][Strong collision resistence for birthday problem]]
In the room with "N" people, what is the probability that =any two people= have the same Birthday?
How many people we should have in the room so that the probability is greater than 0.5?

solution is as followed
- first person's birthday, there are 365 possible birthdays.
- second person's birthday, 364 possibilities.
- so the number of different ways we can have the birthdays distributed among N people in such a way that no two are the same is $365*364*...*(365-N+1)$
- But the total number of different wyas we can have the birthdays distributed among N people with no restrictions is $(365)^{N}$
- so, $p = 1 - (365*354*...*(365-(n-1))/365^{n}$
- So, N has to be greater than or equal to 23.
- A rule of thumb approximates this as the square root of 365 which is about 19, not a number very far from 23.
- Theoritically, this number is about square root of N.
* FAQs
** Compare
*** SSL vs telnet vs ftp vs ftp/s vs  rlogin vs rsh vs rcp
**** SSL replaces legacy tools and protocol including telnet vs ftp vs ftp/s vs  rlogin vs rsh vs rcp
** [[https://security.stackexchange.com/questions/120706/why-would-i-sign-my-git-commits-with-a-gpg-key-when-i-already-use-an-ssh-key-to/120725#120725][Why would I sign my git ocmmits with a GPG key when I already use an SSH key to authenticate myself when I push?]]
When you authenticate to Github with your SSH key, that authentication doesn't become part of the repository in any meaningful or lasting way. It causes Github to give you access for the moment, but it doesn't prove anything to anyone who is not Github.

When you GPG-sign a git tag, that tag is part of the repository, and can be pushed to other copies of the repository. Thus, other people who clone your repository can verify the signed tag, assuming that they have access to your public key and reason to trust it.
