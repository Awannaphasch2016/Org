#+TITLE: Ec2 Note
#+filetags: ec2 aws
#+hugo_base_dir: /home/awannaphasch2016/org/projects/sideprojects/website/my-website/hugo/quickstart

* References
- ref
  - [[https://medium.com/swlh/launch-and-manage-ec2-instances-using-aws-cli-7efae00e264b][Launch and Manage EC2 Instances Using AWS CLI]]
  - [[https://docs.aws.amazon.com/cli/latest/userguide/cli-services-ec2-keypairs.html#cli-services-ec2-keypairs-prereqs][creating displaying, and deleting Amazon EC2 key pairs]]
* blog :blog:
** Using Terraform to set up ec2 instances for data science projects. :terraform:
:PROPERTIES:
:EXPORT_FILE_NAME: Using Terraform to set up ec2 instances for data science projects.
:ID:       3348a55c-0141-4670-a102-f1426a28f9ae
:END:
*** Take Away
  :PROPERTIES:
  :CUSTOM_ID: take-away
  :END:

- you will learn how to automate ec2 setup using terraform that is
  suited for data science project.

*** Tools
  :PROPERTIES:
  :CUSTOM_ID: tools
  :END:
- EC2
- Terraform
*** Requirements
  :PROPERTIES:
  :CUSTOM_ID: requirements
  :END:
**** Knowledge Requirements
   :PROPERTIES:
   :CUSTOM_ID: knowledge-requirements
   :END:

- understand basic of how to create terraform project
- understand basic of how to set up ec2 instances

**** System Requirements
   :PROPERTIES:
   :CUSTOM_ID: system-requirements
   :ID:       0fcaa251-3c8d-4bdb-bc43-4db4815d6444
   :END:

- WSL/Ubuntu

  - I have only tested this in WSL

- install all dependencies of cuda

  - for list of software requirements, see

    - https://www.tensorflow.org/install/gpu#linux_setup

- optional

  - Docker # References

- Terraform AWS documentation

  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#availability_zone

- pytorch docker image

  - https://github.com/anibali/docker-pytorch # Content

*** Code
  :PROPERTIES:
  :CUSTOM_ID: code
  :END:
**** AWS
   :PROPERTIES:
   :CUSTOM_ID: aws
   :END:

1. export the following environment variables including

   - AWS_ACCESS_KEY_ID
   - AWS_SECRET_ACCESS_KEY
   - AWS_DEFAULT_REGION

**** Terraform
   :PROPERTIES:
   :CUSTOM_ID: terraform
   :END:

1. create terraform project
2. In the project, create main.tf and copy&paste the following code

#+BEGIN_EXAMPLE
    resource "aws_instance" "web" {
      ami = "ami-08962a4068733a2b6"
      instance_type = "p3.8xlarge"
      cpu_core_count = 16
      cpu_threads_per_core = 2
      tags = {
        Name = "HelloWorld"
      }

    }
#+END_EXAMPLE

3. now you have ec2 running with
** A Note of X where X = AWS EC2 services.
:PROPERTIES:
:ID:       2af2bed0-036f-4073-8590-c26cefa14f88
:EXPORT_FILE_NAME: A Note of X where X = AWS EC2 services.
:END:
An EC2 instance has 4 state of life cycle: running, stopped, and terminated. Furthermore, state transition (or action) of an EC2 instance is launch, rebooting, pending, shutting-down, and stopping, see ref:ec2_life_cycle.

#+name: ec2_life_cycle
#+caption: EC2 instance life cycle
#+attr_html: :width 500px :height 50px
[[file:./images/screenshot_20220711_141153.png]]

*** Validating that you have correct setup
This article assumes that you have setup AWS credentials in your terminal environment. You can check out one of my article named "Setup AWS credentials for your AWS account and create new user" to help you set things up.
*** Setup and launch EC2 instance
To launch an EC2 instance, you need to deal with securities [fn:1]. Securities part that we need to deal with is authentication and permission. First, you need to authenticate that you have "key" to access an instance. If you don't already have =keypair=, you can create keypair as followed:
#+BEGIN_SRC sh
aws ec2 create-key-pair --key-name <your-key-name> --output text > <your-key-name>.pem
#+END_SRC
Note that =.pem= stands for permission. Make sure to save primary key somewhere. You will need to pass =.pem= to EC2 instance you wish to interact with.

Secondly, you need to obtain =AWS IAM policies= that allow you to interact with an instance. If you don't already have =IAM users group=. You can create one as followed.
#+BEGIN_SRC sh :noeval
aws ec2 create-security-group --group-name <group-name> --description <description>
#+END_SRC
Using above command, you need assign =IAM policies= to =IAM user group=. Note that I haven't tested the above command manually because I already have =IAM users group= with appropriate policies. As of [2022-07-11 Mon], I haven't tried adding policies to IAM identity such as =IAM user gruop= via command line. I have only tried doing in on AWS console.

To launch EC2 from command line, type in
#+BEGIN_SRC sh :noeval
aws ec2 run-instances --image-id ami-0fb653ca2d3203ac1 --instance-type t2.micro --count 1 --security-group-ids sg-0db2887fa3dbd0493 --key-name <key-name>
#+END_SRC

Note that permission to access EC2 instance via ssh is separated from permission to access EC2 instance on the browser. Make sure you get the right permission for this.

*** Footnotes

[fn:1] When one interacts with remote services, securities will and must always be taken into account. This may seem unnecessary at times, but, without secure service, existence of a service cannot be justified.

* command line
** start instances
~aws ec2 start-instances --instance-ids i-04857a8be9b9de952~
** create security-group
~aws ec2 create-security-group --group-name "expert-crypto" --description "expert discovery for crypto"~
** create key-value pair
~aws ec2 create-key-pair --key-name <your key name>~
** create new EC2 instance
~aws ec2 run-instances --image-id ami-0fb653ca2d3203ac1 --instance-type t2.micro --count 1 --security-group-ids sg-0db2887fa3dbd0493 --key-name ExpertCrypto~
** create tags for resources
~aws ec2 create-tags --resources i-07f6b9c46c87b4233 --tags Key=test,Value=test~
