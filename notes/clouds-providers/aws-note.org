#+TITLE: Aws Note

* Services
** Quick Setup
- ref
  - [[https://docs.aws.amazon.com/systems-manager/latest/userguide/quick-setup-getting-started.html][Get started with Quick Setup]]

** IAM
*** IAM users
**** get account-id and arn
~aws sts get-caller-identity~
~aws sts get-caller-identity --query "Account" --output text~
**** login as IAM users
go to the following link =https://account_alias_or_id.signin.aws.amazon.com/console/=.
**** create new user
~aws iam create-user --user-name Adam~
**** list all users and their policies
#+BEGIN_SRC sh :results raw
aws iam list-users
#+END_SRC

#+BEGIN_SRC sh :results raw
aws iam list-user-policies --user-name Anak
#+END_SRC

#+BEGIN_SRC sh :results raw
aws iam list-attached-user-policies --user-name Adam
#+END_SRC
}

#+BEGIN_SRC sh :results raw
aws iam list-groups-for-user
#+END_SRC

For each group
#+BEGIN_SRC sh :results raw
aws iam list-group-policies
#+END_SRC

#+BEGIN_SRC sh :results raw
aws iam list-attached-group-policies
#+END_SRC

**** IAM user login profile
***** check IAM users login profile.
~aws iam get-login-profile --user-name Anak~
***** check if users has password see [[https://awsbytes.com/how-to-check-if-an-iam-user-has-a-login-profilepassword/][here]].
Retrieves the user name for the specified IAM user. A login profile is created when you create a password for the user to access the Amazon Web Services Management Console. If the user does not exist or does not have a password, the operation returns a 404 (NoSuchEntity ) error.
***** create user log profiles (this is done by creating password for user)
 ~aws iam create-login-profile --user-name Adam --password Change2022 --password-reset-required~
*** Policies + Permissions + Roles
**** Attach new policies to group-policies
~aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name ExpertCrypto~
**** Attach a new user to group-policies
*** show aws configuration
~aws configure~
** EC2
- ref
  - [[https://medium.com/swlh/launch-and-manage-ec2-instances-using-aws-cli-7efae00e264b][Launch and Manage EC2 Instances Using AWS CLI]]
  - [[https://docs.aws.amazon.com/cli/latest/userguide/cli-services-ec2-keypairs.html#cli-services-ec2-keypairs-prereqs][creating displaying, and deleting Amazon EC2 key pairs]]
*** command line
**** start instances
~aws ec2 start-instances --instance-ids i-04857a8be9b9de952~
**** create security-group
~aws ec2 create-security-group --group-name "expert-crypto" --description "expert discovery for crypto"~
**** create key-value pair
~aws ec2 create-key-pair --key-name <your key name>~
**** create new EC2 instance
~aws ec2 run-instances --image-id ami-0fb653ca2d3203ac1 --instance-type t2.micro --count 1 --security-group-ids sg-0db2887fa3dbd0493 --key-name ExpertCrypto~
**** create tags for resources
~aws ec2 create-tags --resources i-07f6b9c46c87b4233 --tags Key=test,Value=test~


* AWS SSM (AWS Systems Manager)

** pros and cons
*** pros

If you are in AWS then some features to like about the SSM approach over traditional SSH are:[fn:1]

- No direct network path required. There is no need to punch holes in your VPC layers and chain bastions.
- Instance authentication controlled through IAM and by extension whichever IdP you may be federating human access with.
- Initial access and every userspace command audited and logged. To create break-glass alerts or “taint” instances that have been accessed is a breeze.

* Footnotes

[fn:1] https://martin.baillie.id/wrote/emacs-tramp-over-aws-ssm-apis/
