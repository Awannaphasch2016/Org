#+TITLE: Incremental Learning

toss coin to choose topics to learning

Just run the block below when I don't have any strong preference on which of these to learn.

#+BEGIN_QUOTE
Understanding triggers of your hesitation are keys to understand collections of preferences, called self.
#+END_QUOTE
Basically, if I hestitate to do what the coin tells you, just redo it.

Toss the coin by running the code below
#+BEGIN_SRC python :results output
topics = ["Emacs", "Blockchain", "Algorithm", "Prompt Programming", "Deep Learning and Data Science"]
import random

# return random.choice(topics)
print(random.choice(topics))
#+END_SRC

#+RESULTS:
: Emacs


* References
** Amazing blogs or articles to boarden knowledge away from my responsibility :)
[[https://eli.thegreenplace.net/archives/all][Eli Bendersky's website]]
[[https://www.gwern.net/index][Gwern Branwen]]

** Awesome repos
[[https://github.com/semi-technologies/awesome-weaviate][Awesome Weaviate]]

** Books

* Current Topics for Incremental Learning
** Emacs
*** learn to implement in emacs using elisp
**** TODO reading [[file:doom-emacs/packages/emacs-application-framework.org::https://github.com/emacs-eaf/emacs-application-framework#install][What is a backtrace & how to produce them]]
**** TODO [[file:books/Writing GNU Emacs Extension - Bob Glickstein.org::*Basic operations][stop at this chapter of 'writing with elisp...']]
**** TODO Figure out how to properly use variation of =interaction= keyword in lisp function.
**** TODO learn to use debug in elisp
*** Contribute to EAF
- look at [[https://github.com/emacs-eaf/emacs-application-framework/wiki/Todo-List][EAF TODO list]] and pick one
*** Understand Emacs at the deeper level
- ref:
    - [[https://tuhdo.github.io/c-ide.html][C/C++ Development Environment for Emacs]]
**** TODO How does environment of linux and emacs differ?
**** learn about the following packages and workflow
***** understand packagers mechanism and functionality
****** learn org-babel
******* Figure out org-babel manipulate output from shell. (so I understand or able to debug scenario in which output of org-babel block are not as what I expected)
****** learn about completion
******* understand prescient, see [[https://www.youtube.com/watch?v=T9kygXveEz0&ab_channel=SystemCrafters][here]].
******* undertand vertico
****** TODO learn about projectile
***** config workflow
****** jump to next error in emacs?
****** explore =alphapapa= github for new seamless integration, [[https://github.com/alphapapa/org-ql][here]].
****** TODO tree-sitter doesn't turn on =tree-sitter-hl-mode= on rustic mode, see [[file:~/.doom.d/config.org::*Emacs Tree Sitter][here]]
****** understand window and buffer config
****** learning to use IRC Client.
****** set up emacs for SQL developement
****** Learning how to use jupyter-notebook from [[https://youtu.be/RD0o2pkJBaI?t=1905][this tutorial.]]
******* TODO make notes on how [[https://github.com/nnicandro/emacs-jupyter#org-mode-source-blocks][jupyter-notebook integrate with org-mode.]]
******* TODO figure out how to properly use :noweb header tags in org babel
see [[https://www.gnu.org/software/emacs/manual/html_node/org/Noweb-Reference-Syntax.html][noweb reference syntax]]
see also [[file:~/org/projects/sideprojects/build-website/org-mode.org][example]]
****** window navigation
ref:
[[https://www.youtube.com/watch?v=-H2nU0rsUMY&ab_channel=SystemCrafters][Hey Emacs, Don't Move My Windows! - Customizing display-buffer's behavior]]

******* implement =open in other window= behavior such that you can open bookmark, recent files, buffer etc to other buffer using =shift + enter=
******* create custom keybinding for scroll up and down other window. (make sure that it is intuitive and can be generalized to be combine with other key binding. )
******* implement =toggling= behavior for switching between previously visited window and next (current) window. (This is useful when using with =ace-window=)
******* create popup window in emacs (like what I use in vim)
****** move section of code to scratch file, see [[https://emacs.stackexchange.com/questions/2810/how-to-copy-or-move-code-in-current-scope-to-end-of-another-file][here]] for reference.
****** TODO compare (diff) two regions, see [[https://emacs.stackexchange.com/questions/18369/how-do-i-compare-regions-in-the-same-file][here]] and [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][ediff document]]for reference.
****** screencast stuff
****** automatically matched parenthesis (or other kinds of closure) in emacs, see [[https://www.google.com/search?q=partedit+emacs&rlz=1C1CHBF_enUS941US941&oq=partedit+emacs+&aqs=chrome..69i57j33i160.3230j0j7&sourceid=chrome&ie=UTF-8][paredit mode]], and this [[https://www.youtube.com/watch?v=QRBcm6jFJ3Q&ab_channel=SachaChua][tutorial]].
****** TODO learn to use Iedit, see [[https://www.youtube.com/watch?v=xrNOLTAl1ug&ab_channel=AritraBhattacharjee][here]].
****** TODO search and replace in emacs
****** TODO multi-cursor edit in emacs
****** TODO learn how =workspace= work
******* learn to save and load =workspace=
****** TODO learn to use tramp to connect to aws container cloud.
**** learn the following mode
***** hledger to maintain financial report
[[https://github.com/narendraj9/hledger-mode][hledger-mode]]
***** kubernetes-mode with limited permission
[[https://github.com/abrochard/kubel][kubel]]
***** [[https://github.com/Silex/docker.el][docker mode]]
***** [[https://github.com/emacsorphanage/terraform-mode][terraform mode]]
***** twittering
***** python mode unable to import module
***** Dap mode
***** lsp mode
****** TODO read and check the following before checking other things on the list
******* https://github.com/ethereum/solidity/issues/7763
******* https://www.reddit.com/r/neovim/comments/l6a5dy/nvim_lsp_support_for_solidity/
****** Implement  lsp-mode for solidity from github issue, see [[https://github.com/ethereum/solidity/issues/7763][here]].
******* TODO Implement lsp-mode for markdown from github issue, see [[https://github.com/emacs-lsp/lsp-mode/issues/3010][here]].
******** Error: I am trying to solve
******** how does =gopls= implement langauge server using =lsp-mode=?
****** check whether python version and python environment are correctly set up. (as it should in without emacs)
****** figure out how to use anaconda in emacs
****** switch style guide
****** using flycheck with lsp-mode.
Error:
=flycheck-list-error=  and =lsp-treemacs-list-error= are not insync.
=flycheck-list-error= shows =unable to import 'pandas' [import-error]=

For =mspyls=, =lsp-treemacs-error-list= only shows error from =tgn= project.
=mspyls= and =pyls=

******* TODO First I need to understand how flycheck and lsp works together before start to debug this.
***** Python mode
****** TODO how to auto format python mode to match code style guideline, see [[https://stackoverflow.com/questions/1288474/is-there-any-way-to-format-a-complete-python-buffer-in-emacs-with-a-key-press][here]].
****** TODO figure out how to interact better with repl.
***** org mode
****** how to create matched emphasize (e.g. =<some word>= etc.).
**** learn package manager
***** learn =straight.el= from tutorial. I stopped [[https://youtu.be/UmbVeqphGlc?t=262][here]].
** Blockchain
*** TODO read or check out the following before moving on to other list.
**** write essay or reimplement code from the following
***** https://youtu.be/M576WGiDBdQ?t=1904
***** https://youtu.be/M576WGiDBdQ?t=2833
***** https://youtu.be/M576WGiDBdQ?t=4092
***** use factory pattern to interact with contract from outside of the contract.
 https://youtu.be/M576WGiDBdQ?t=8780
***** what is the goal of factory pattern?
***** what are the things that I can and cannot do without and with factory pattern?
https://youtu.be/M576WGiDBdQ?t=11283
https://youtu.be/M576WGiDBdQ?t=15770
https://youtu.be/M576WGiDBdQ?t=22246
***** malware stuff
https://youtu.be/k-nFdF5FEwA?t=2702
**** stuff to read
***** https://ethereum.org/en/developers/docs/scaling/layer-2-rollups/
***** https://www.google.com/search?q=evm+compatible&rlz=1C1CHBF_enUS941US941&oq=evm+&aqs=chrome.2.69i57j0i433i512j0i512l8.3560j0j7&sourceid=chrome&ie=UTF-8
***** https://www.preciouschicken.com/blog/posts/short-sharp-solidity-pure-vs-view-vs-call/
**** colony coin
***** create colony for =pen.el=
***** contribute to colony coin
****** https://github.com/JoinColony/colonyDapp/labels/good-first-issue
****** https://github.com/JoinColony/colonyNetwork/issues
******* understanding this issue -> https://github.com/JoinColony/colonyNetwork/pull/1008
- CoinMachine?
- how to create smart contract?
- check the following test
  - test-contracts-coverage?
  - test-reputation-coverage.
  - chainid

**** tutorial
***** https://www.youtube.com/watch?v=M576WGiDBdQ&ab_channel=freeCodeCamp.org
***** https://github.com/smartcontractkit/full-blockchain-solidity-course-py
*** TODO Complete this [[https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/][tutorial]] on Solona
**** learning rust only when Solona tutorial needs it using ~rustling~.
*** [[https://mycoralhealth.medium.com/code-your-own-blockchain-in-less-than-200-lines-of-go-e296282bcffc][Code your own building in less than 200 lines of Go!]]
*** TODO [[https://jeiwan.net/posts/building-blockchain-in-go-part-1/][following building blockchain in Go]]
*** TODO understand funcdamental of blockchain
- reading the following
  - trying to understand ~encorse peers~ (~endorser transaction~) used in ~Hyperledger Fabric~
    - I stopped [[https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html#peers-and-channels][here]]

** Algorithm, Computer Science & Deverlopers Fundamentals
*** TODO learning from leetcode
Note: to learn algorithm and new language at the same time for each algorithm, reimplement them in all the language including (rust, javascript, golang, c, c++. python)
**** Add Two Numbers
learning about link list
*** TODO reading [[https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-4.html][Structure and Interpretation of Computer Programs]]
stopped [[https://sicp.sourceacademy.org/chapters/1.1.html][here]]
*** gist
**** I failed to switch git permission, see [[file:git-notes.org::*Switching git permission][here]].

** Prompt Programming
*** TODO reading [[https://generative.ink/posts/methods-of-prompt-programming/][methods of prompt programming]]
*** TODO reading [[id:][GPT-3 creative fiction]]
** Classes that I am taking
*** Database
- presentation
  - note
    - deadline: before the end of semester.
  - Paper: [[https://www.semanticscholar.org/paper/Anatomy-of-a-Database-System-Hellerstein-Stonebraker/acf0f99dd4bbcbf7049b787e10cb538c620ed110][Anatomy of a Database system.]] (10 percent extra credit)


** Deep learning and Data Science
*** TODO working on [[file:~/org/researches/ssl-dynamic-graph/log-ssl-dynamic-graph.org][log of ssl-dgnn]]
- be sufficient in rush enough to plot all the basic stuff.
  ref:
  [[https://www.youtube.com/watch?v=2o1YDUKyhu0&ab_channel=RiffomonasProject][Learning to use the patchwork R package (how to learn a package in general) (CC099)]]
*** TODO question to answer to help with my own implementation
how does DDGCL uses GAN loss?
what is DDGCL architecture like?
is DDGCL generative or contrastive?
is DDGCL reconstruct next window or current window?

to understand how DDGCL train, I have to read the following paper.
1.MoCo
2.E2E

* Out of current focus, but I really want to learn more

** learn about debugging
*** Read [[https://youtu.be/FihU5JxmnBg?t=2779][Why Programs Fails a guide to systematic debugging]] (read chapters 5-7, 11-14)
** learn about data science at commandline
**** TODO study xvzf code on "command line pandas killer" (mlr, q, csvtk, xsv, tsv-utils) and adopt the usecase in my workflow, see [[https://github.com/xvzftube/pandas_killers/blob/main/main.sh][here]].
** learn new languages by doing.
*** Building website using org mode.
build the website using this [[https://www.huxiaoxing.com/building-a-website-with-org-mode-files][framework]].
*** learning Typescript by doing.
[[https://blog.scottlogic.com/2019/05/17/webassembly-compiler.html][build your own WebAssembly compiler]]
[[https://github.com/g-plane/tiny-package-manager][Tiny Package Manager: Learns how npm or Yarn works]]
*** learning Javascript by doing.
[[https://github.com/ronami/minipack][build your own module bundler -minipack]]
[[https://levelup.gitconnected.com/understand-javascript-promises-by-building-a-promise-from-scratch-84c0fd855720][learn JavaScript Promises by Building a Promis from Scratch]]
[[https://medium.com/@ankur_anand/implement-your-own-call-apply-and-bind-method-in-javascript-42cc85dba1b][Implement your own--call(), apply(), and bind() method in JavaScript.]]
[[http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html][Dagoba: an in-memory graph database]]
*** learning Go by doing
**** [[https://blog.jse.li/posts/torrent/][Building a BitTorrent client form the ground up in Go]]
*** Learning C from open source code
**** [[https://cstack.github.io/db_tutorial/][let's build a simple database.]]
**** understand how coreutils (data science related command lines)
[[https://github.com/coreutils/coreutils/blob/master/src/cat.c][source code to cat command]]
** learn generallized funcationality
*** learn undo and redo mechanism
- understand undo and redo mechanism in =winner-mode= in emacs.
- understand undo and redo mechanism in =visidata=.
** learn about software design
*** figure out software design of visidata. (why does it change? what changed?)
*** figure out software design of org roam. (why does it change? what changed?)
** oragnize stuff to optimize for future workflow
*** categorize =Garun= features into =incremental learning= page (this page.) by creating links
** learn how to think mathematically.
*** finish [[https://www.youtube.com/watch?v=LN7cCW1rSsI&ab_channel=Nerd%27slesson][introduction to mathmematical thinking complete course]]
**** I stop [[https://youtu.be/LN7cCW1rSsI?t=489][here]]. finish reading [[https://github.com/kyrylo/coursera-mathematical-thinking/blob/master/lecture-0/background-reading-what-is-mathematics.pdf][this]] paper before continue with the lecture.

** learning to hack
*** watch [[https://www.youtube.com/c/LiveOverflow/playlists][LiveOverflow]]
** project: crypto with kenny
currently, I implement the code in =~/Scratches/tmp1.py=
implementing demo todo
- find key of data that will be used to stored as data.
- store data in comma separated files. (other value like freq count can be derived from this one.)
- follow stream of 1 crypto news account. (This required me to only filter data that have screen_name key == account_name)
- try to run it overnight to collect data.
- check how data is structure.
  - in which scenario does `stream.filter(follow=[get_user_id("DocumentingBTC")], threaded=False)` returns any value at all.
** project: scraping with stein
- scrapy
https://www.bovada.lv/sports/basketball/nba
** project: build website for adam investor

the site name is =blackwatercoins.com=

** project: create website for blog using org mode.
*** goal: publish website that capable of hosting org file
- ref
  - read the following tutorial: https://thackl.github.io/blogging-with-emacs-org-mode-and-jekyll
- note
  - my current blog is using jekyll but files are .md not .org.
  - I started to add org files into my blogs directory without testing whether or not it will work. On top of that, I didn't even follow naming convention which, if I remember correct, are necessary to make jekyll works. Hence, I don't expect it to work, so debug it.
** learning scala + functional programming language.
- ref
  - [[https://www.youtube.com/watch?v=LQVDJtfpQU0&list=PLS1QulWo1RIagob5D6kMIAvu7DQC5VTh3&ab_channel=ProgrammingKnowledge][scala tutorial]]
  - [[https://github.com/elleFlorio/scalachain][scalachain]]
    - [[https://www.freecodecamp.org/news/how-to-build-a-simple-actor-based-blockchain-aac1e996c177/][How to build a simple actor-based blockchain]]


** learning GNU Guix (for config file reproducibility.)
- ref
  - learn from system crafter playlist, [[https://www.youtube.com/watch?v=iBaqOK75cho&list=PLEoMzSkcN8oNxnj7jm5V2ZcGc52002pQU&ab_channel=SystemCrafters][here]].
  - guix on wsl2, [[https://gist.github.com/giuliano108/49ec5bd0a9339db98535bc793ceb5ab4][here.]]
