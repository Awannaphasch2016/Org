#+TITLE: Incremental Learning

toss coin to choose topics to learning

Just run the block below when I don't have any strong preference on which of these to learn.

#+BEGIN_QUOTE
Understanding triggers of your hesitation are keys to understand collections of preferences, called self.
#+END_QUOTE
Basically, if I hestitate to do what the coin tells you, just redo it.

Toss the coin by running the code below
#+BEGIN_SRC python :results output
topics = ["Emacs", "Blockchain", "Algorithm", "Prompt Programming", "Deep Learning and Data Science"]
import random

# return random.choice(topics)
print(random.choice(topics))
#+END_SRC

#+RESULTS:
: Blockchain


* References
** Amazing blogs or articles to boarden knowledge away from my responsibility :)
[[https://eli.thegreenplace.net/archives/all][Eli Bendersky's website]]
[[https://www.gwern.net/index][Gwern Branwen]]

** Awesome repos
[[https://github.com/semi-technologies/awesome-weaviate][Awesome Weaviate]]

** Books

* Current Topics for Incremental Learning
** Emacs
*** TODO learn to implement in emacs using elisp
- reading [[file:doom-emacs/packages/emacs-application-framework.org::https://github.com/emacs-eaf/emacs-application-framework#install][What is a backtrace & how to produce them]]
- [[file:books/Writing GNU Emacs Extension - Bob Glickstein.org::*Basic operations][stop at this chapter of 'writing with elisp...']]
*** TODO Contribute to EAF
- look at [[https://github.com/emacs-eaf/emacs-application-framework/wiki/Todo-List][EAF TODO list]] and pick one
*** Dap mode
**** how to load debug.el automatically?
*** Figure out how to properly use variation of =interaction=
*** Figure out org-babel manipulate output from shell. (so I understand or able to debug scenario in which output of org-babel block are not as what I expected)
*** Learning how to use jupyter-notebook from [[https://youtu.be/RD0o2pkJBaI?t=1905][this tutorial.]]

**** TODO make notes on how [[https://github.com/nnicandro/emacs-jupyter#org-mode-source-blocks][jupyter-notebook integrate with org-mode.]]
**** TODO figure out how to properly use :noweb header tags in org babel
see [[https://www.gnu.org/software/emacs/manual/html_node/org/Noweb-Reference-Syntax.html][noweb reference syntax]]
see also [[file:~/org/projects/sideprojects/build-website/org-mode.org][example]]
*** learning to use IRC Client.
*** set up emacs for SQL developement
*** learn the following mode
**** hledger to maintain financial report
[[https://github.com/narendraj9/hledger-mode][hledger-mode]]
**** kubernetes-mode with limited permission
[[https://github.com/abrochard/kubel][kubel]]
**** [[https://github.com/Silex/docker.el][docker mode]]
**** [[https://github.com/emacsorphanage/terraform-mode][terraform mode]]
**** twitter
**** screencast stuff

** Blockchain
*** TODO Complete this [[https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/][tutorial]] on Solona
- learning rust using ~rustling~
*** TODO understand funcdamental of blockchain
- reading the following
  https://dl.acm.org/doi/pdf/10.1145/3471140?casa_token=wPW15CfV4zgAAAAA:_JbcvPAWjkFnU7fQBbYut8zGMIjgiDE2jhrLyfJo8hjohFOtGLQJa4V27ysLkTlhphZaf2gPAxgNyw
  - trying to understand ~encorse peers~ (~endorser transaction~) used in ~Hyperledger Fabric~
    - I stopped [[https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html#peers-and-channels][here]]

** Algorithm, Computer Science & Deverlopers Fundamentals
*** TODO learning from leetcode
**** Add Two Numbers
learning about link list
*** TODO reading [[https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-4.html][Structure and Interpretation of Computer Programs]]
stopped [[https://sicp.sourceacademy.org/chapters/1.1.html][here]]
*** gist
**** I failed to switch git permission, see [[file:git-notes.org::*Switching git permission][here]].

** Prompt Programming
*** TODO reading [[https://generative.ink/posts/methods-of-prompt-programming/][methods of prompt programming]]
*** TODO reading [[id:][GPT-3 creative fiction]]
** Deep learning and Data Science
*** TODO working on [[file:~/org/researches/ssl-dynamic-graph/log-ssl-dynamic-graph.org][log of ssl-dgnn]]
- be sufficient in rush enough to plot all the basic stuff.
  ref:
  [[https://www.youtube.com/watch?v=2o1YDUKyhu0&ab_channel=RiffomonasProject][Learning to use the patchwork R package (how to learn a package in general) (CC099)]]

* Out of current focus, but I really want to learn more

** Learning C from open source code
*** understand how coreutils (data science related command lines)
[[https://github.com/coreutils/coreutils/blob/master/src/cat.c][source code to cat command]]
** Read [[https://youtu.be/FihU5JxmnBg?t=2779][Why Programs Fails a guide to systematic debugging]] (read chapters 5-7, 11-14)
** Building website using org mode.
build the website using this [[https://www.huxiaoxing.com/building-a-website-with-org-mode-files][framework]].
** learning Typescript by doing.
[[https://blog.scottlogic.com/2019/05/17/webassembly-compiler.html][build your own WebAssembly compiler]]
[[https://github.com/g-plane/tiny-package-manager][Tiny Package Manager: Learns how npm or Yarn works]]
** learning Javascript by doing.
[[https://github.com/ronami/minipack][build your own module bundler -minipack]]
[[https://levelup.gitconnected.com/understand-javascript-promises-by-building-a-promise-from-scratch-84c0fd855720][learn JavaScript Promises by Building a Promis from Scratch]]
[[https://medium.com/@ankur_anand/implement-your-own-call-apply-and-bind-method-in-javascript-42cc85dba1b][Implement your own--call(), apply(), and bind() method in JavaScript.]]
** learning Go by doing
*** [[https://blog.jse.li/posts/torrent/][Building a BitTorrent client form the ground up in Go]]
