#+TITLE: Incremental Learning
#+FILETAGS: perosonal @sideproject incrementallearning

toss coin to choose topics to learning

Just run the block below when I don't have any strong preference on which of these to learn.

#+BEGIN_QUOTE
Understanding triggers of your hesitation are keys to understand collections of preferences, called self.
#+END_QUOTE
Basically, if I hestitate to do what the coin tells you, just redo it.

Toss the coin by running the code below
#+BEGIN_SRC python :results output
topics = ["Emacs", "Blockchain", "Algorithm", "Prompt Programming", "Deep Learning and Data Science"]
import random

# return random.choice(topics)
print(random.choice(topics))
#+END_SRC


* References
** Awesome repos
[[https://github.com/semi-technologies/awesome-weaviate][Awesome Weaviate]]
* Super Memory Project
** Space Repeition
*** Habit :habit:
:PROPERTIES:
:CATEGORY: Habit
:LOGGING:  DONE(!)
:ARCHIVE:  %s_archive::* Habits
:ID:       240a1cc9-1305-4a1b-b3e6-0fa59db5a6e6
:END:
**** NEXT 1 hour space repeition recall.
SCHEDULED: <2022-04-17 Sun .+1d>
:PROPERTIES:
:STYLE: habit
:REPEAT_TO_STATE: NEXT
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2022-04-16 Sat 16:45]
- State "DONE"       from "NEXT"       [2022-04-13 Wed 14:45]
- State "DONE"       from "NEXT"       [2022-04-10 Sun 19:55]
- State "DONE"       from "NEXT"       [2022-04-09 Sat 23:04]
:END:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:

* Out of current focus, but I really want to learn more :freetime:hobbie:
:PROPERTIES:
:ID:       e0653f15-fa7b-4d49-b9d7-d7b89f43d57c
:END:
** Video Editing
*** Habit :habit:
:PROPERTIES:
:CATEGORY: Habit
:LOGGING:  DONE(!)
:ARCHIVE:  %s_archive::* Habits
:END:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
** learn Photoshop
*** Habit :habit:
:PROPERTIES:
:CATEGORY: Habit
:LOGGING:  DONE(!)
:ARCHIVE:  %s_archive::* Habits
:END:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
** learn to do Logo
*** Habit :habit:
:PROPERTIES:
:CATEGORY: Habit
:LOGGING:  DONE(!)
:ARCHIVE:  %s_archive::* Habits
:END:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
** learn Blockchain :blockchain:
*** Habit :habit:
:PROPERTIES:
:CATEGORY: Habit
:LOGGING:  DONE(!)
:ARCHIVE:  %s_archive::* Habits
:END:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
:PROPERTIES:
:ID:       9b42d548-8040-4e8f-b816-33a9f27e57d1
:END:
***** blockchain implementation
****** Complete this [[https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/][tutorial]] on Solona :solona:
******* learning rust only when Solona tutorial needs it using ~rustling~
****** [[https://mycoralhealth.medium.com/code-your-own-blockchain-in-less-than-200-lines-of-go-e296282bcffc][Code your own blockchian in less than 200 line of go.]]
****** [[https://jeiwan.net/posts/building-blockchain-in-go-part-1/][following building blockchain in Go]]
***** experiment with Dapps, DAOs, and protocol to get a more personalize experience of what they are and how they work
****** fill application for FWB
** learn Deep learning and Data Science :datascience:deeplearning:
*** Habit :habit:
:PROPERTIES:
:CATEGORY: Habit
:LOGGING:  DONE(!)
:ARCHIVE:  %s_archive::* Habits
:END:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
*****  learn to use ray with slurm :slurm:
- ref
  - [[https://docs.ray.io/en/latest/cluster/slurm.html][deploying ray on slurm]]
*****  implement model with CUDA (performance tuning stuff) :cuda:
- ref
  - [[https://luniak.io/cuda-neural-network-implementation-part-1/][CUDA Neural Network Implementation (Part 1)]]
  - https://developer.nvidia.com/blog/programming-tensor-cores-cuda-9/
  - [[https://pytorch.org/tutorials/recipes/recipes/tuning_guide.html][Performance tuning guide (pytorch)]]
****** read hands-on GPU programming with Python and CUDA. see [[https://subscription.packtpub.com/book/application-development/9781788993913/1][here]].
[2022-02-25 Fri 15:52]
[[file:~/org/notes/emacs/packages/tramp-note.org::*Tutorial][Tutorial]]

** learn about debugging :debug:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** read the art of debugging.
[2022-02-25 Fri 15:48]
[[file:~/org/notes/emacs/packages/tramp-note.org::*References][References]]
***** implement debugger from scratch. (see [[https://www.google.com/search?q=implement+debugger+from+scratch&rlz=1C1CHBF_enUS941US941&oq=implement+debugger+from+scratch+&aqs=chrome..69i57.6093j1j7&sourceid=chrome&ie=UTF-8][here]])
[2022-02-25 Fri 15:54]
- ref
  - [[file:~/org/refile.org::*read hands-on GPU programming with Python and CUDA. see \[\[https://subscription.packtpub.com/book/application-development/9781788993913/1\]\[here\]\].][read hands-on GPU programming with Python and CUDA. see here.]]
** learn about data science at commandline :cmd:datascience:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** begin reading data science at commandline 2nd (https://mail.google.com/mail/u/0/#inbox/FMfcgzGmvBpgRLhhLPHmKxjwSSmdxMJF)
:LOGBOOK:
CLOCK: [2022-02-24 Thu 11:12]--[2022-02-24 Thu 11:13] =>  0:01
:END:
[2022-02-24 Thu 11:12]
[[file:~/org/school.org::*check my exam dates][check my exam dates]]
** learn undo and redo mechanism
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** understand undo and redo mechanism in =winner-mode= in emacs.
***** understand undo and redo mechanism in =visidata=. :visidata:
** learn about software design
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** figure out software design of visidata. (why does it change? what changed?)
***** figure out software design of org roam. (why does it change? what changed?)
***** read system design book.
[2022-02-25 Fri 15:50]
[[file:~/org/notes/emacs/packages/tramp-note.org][file:~/org/notes/emacs/packages/tramp-note.org]]
** learn how to think mathematically. :math:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** finish [[https://www.youtube.com/watch?v=LN7cCW1rSsI&ab_channel=Nerd%27slesson][introduction to mathmematical thinking complete course]]
****** I stop [[https://youtu.be/LN7cCW1rSsI?t=489][here]]. finish reading [[https://github.com/kyrylo/coursera-mathematical-thinking/blob/master/lecture-0/background-reading-what-is-mathematics.pdf][this]] paper before continue with the lecture.

** learn to hack :hack:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** watch [[https://www.youtube.com/c/LiveOverflow/playlists][LiveOverflow]]
** learn to scraping :webscraping:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** using scrapy to scrape
****** https://www.bovada.lv/sports/basketball/nba
** learn clojure :clojoure:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** [[https://hackernoon.com/learn-blockchains-by-building-one-117428612f46][learning blockchain by building one with clojure]] :blockchain:
** learn scala :scala:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** [[https://www.youtube.com/watch?v=LQVDJtfpQU0&list=PLS1QulWo1RIagob5D6kMIAvu7DQC5VTh3&ab_channel=ProgrammingKnowledge][scala tutorial]]
***** [[https://github.com/elleFlorio/scalachain][scalachain]] :blockchain:
***** [[https://www.freecodecamp.org/news/how-to-build-a-simple-actor-based-blockchain-aac1e996c177/][How to build a simple actor-based blockchain]] :blockchain:
** learn Typescript :typescript:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** [[https://blog.scottlogic.com/2019/05/17/webassembly-compiler.html][build your own WebAssembly compiler]] :compiler:
***** [[https://github.com/g-plane/tiny-package-manager][Tiny Package Manager: Learns how npm or Yarn works]] :packagemanager:
** learn Javascript :javascript:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** [[https://github.com/ronami/minipack][build your own module bundler -minipack]] :packagemanager:
***** [[https://levelup.gitconnected.com/understand-javascript-promises-by-building-a-promise-from-scratch-84c0fd855720][learn JavaScript Promises by Building a Promis from Scratch]]
***** [[https://medium.com/@ankur_anand/implement-your-own-call-apply-and-bind-method-in-javascript-42cc85dba1b][Implement your own--call(), apply(), and bind() method in JavaScript.]]
***** [[http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html][Dagoba: an in-memory graph database]] :database:graphdatabase:
** learn cpp (the goal is to learn how to write high performance code) :cpp:
*** Notes :note:
[[https://github.com/PacktPublishing/Cpp-High-Performance-Second-Edition][C++ High Performance, Second Edition]]
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
** learn Go :go:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** [[https://blog.jse.li/posts/torrent/][Building a BitTorrent client form the ground up in Go]] :bittorrent:
***** build docker using Go from scratch :docker:
******  [[https://www.infoq.com/articles/build-a-container-golang/][Go: Build Your Own Container Using Less than 100 Lines of Go]]
******  [[https://www.youtube.com/watch?v=8fi7uSYlOdc&ab_channel=GOTOConferences][Containers From Scratch  Liz Rice  GOTO 2018]]
stop [[https://youtu.be/8fi7uSYlOdc?t=616][here]].
** Learn C from open source code :c:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** [[https://cstack.github.io/db_tutorial/][let's build a simple database.]] :database:
***** understand how coreutils (data science related command lines) :cmd:linux:
****** [[https://github.com/coreutils/coreutils/blob/master/src/cat.c][source code to cat command]]

** learn distributed system :distributedsystem:
*** Notes :note:
Google search: [[https://www.youtube.com/results?search_query=build+distributed+system+from+scratch+][build distributed system from scratch]]
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** [[https://nullprogram.com/blog/2010/08/07/][distributed computing with emacs]] :emacs:
***** [[https://towardsdatascience.com/lets-build-a-simple-distributed-computing-system-for-modern-cloud-part-one-e2b745126211][let's build a simple distributed computing system, for modern cloud]]

** learn GNU Guix (for config file reproducibility.) :gnu:guix:
*** Notes :note:
**** learn from system crafter playlist, [[https://www.youtube.com/watch?v=iBaqOK75cho&list=PLEoMzSkcN8oNxnj7jm5V2ZcGc52002pQU&ab_channel=SystemCrafters][here]].
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** guix on wsl2, [[https://gist.github.com/giuliano108/49ec5bd0a9339db98535bc793ceb5ab4][here.]] :wsl2:
** learn about garbage collection :garbagecollection:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html#:~:text=Emacs%20provides%20a%20garbage%20collector,still%20accessible%20to%20Lisp%20programs.][Emacs nodes on Garbage Collection]]
***** [[https://emacs.stackexchange.com/questions/18454/control-of-garbage-collection/18455][Control of garbage collection?]]
***** [[https://emacs.stackexchange.com/questions/34342/is-there-any-downside-to-setting-gc-cons-threshold-very-high-and-collecting-ga][Is there any downside to setting `gc-cons-threshold` very high and collecting garbage when idle?]]
***** [[https://akrl.sdf.org/lexspaces/lexspaces.html][A binding based approach to proper namespaces for GNU Emacs]]
***** [[https://emacs.stackexchange.com/questions/52697/why-does-a-let-bound-huge-list-survive-garbage-collection-after-the-let-form][Why does a let-bound huge list survive garbage collection after the let form?]]
***** figure out how simple implementation of gcmh package works, see [[https://gitlab.com/koral/gcmh/-/blob/0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9/gcmh.el][here]].
***** implement garbage collection from scratch
** building simple multi-threading projects :multithreading:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** [[https://www.reddit.com/r/learnprogramming/comments/8m1bmq/simple_multithreading_project_ideas/][simple multithreading project ideas]]
***** [[https://www.emacswiki.org/emacs/Elnode][elnode]]
Elnode is an asynchronous HttpServer framework. You can use it to write HTTP services in EmacsLisp.
** learn networking :networking:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** Building A Network with OSI from scratch
- ref
  - [[https://www.houstonisd.org/cms/lib2/TX01001591/Centricity/Domain/20951/Ch03%20Book.pdf][Building a Network with OSI]]
** building sudoku with literate programming :literateprogramming:
- ref
  - [[https://reindeereffect.github.io/2020/05/05/index.html][Making and Slaying Monster Sudoku]]
** learn wolframe language for practical use. :wolframelanguage:
*** Notes :note:
**** [[https://reference.wolfram.com/language/][wolfram language & system]]
**** http://xahlee.info/M/index.html
**** [[https://rgoswami.me/posts/org-mathematica/][using mathematica with orgmode]]
**** [[http://xahlee.info/emacs/misc/xah-wolfram-mode.html][xah wolfram mode]]
**** [[https://github.com/kawabata/wolfram-mode][wolframe mode]]
**** [[https://www.wolfram.com/language/elementary-introduction/2nd-ed/23-more-about-numbers.html][an elementary introduction to the wolfram language.]]
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
** implement domain specific language. :DSL:
*** Notes :note:
  - [[https://ragnarsecurity.medium.com/why-you-should-learn-reverse-engineering-and-how-to-get-started-2084990b75db][article: why you should learn reverse engineering and how to get started]] (start here)
  - [[https://livebook.manning.com/book/domain-specific-languages-made-easy/meap-version-8/v-8/][domain specific language made easy]]
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
** build database :database:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** [[*\[\[https://cstack.github.io/db_tutorial/\]\[let's build a simple database.\]\]][let's build a simple database.]]
***** build my own database where I can query dataset from different machine to do data analysis. try out Amazon Athena. (what is it used for? what are other alternative?)
:LOGBOOK:
CLOCK: [2022-02-24 Thu 18:17]--[2022-02-24 Thu 18:18] =>  0:01
:END:
[2022-02-24 Thu 18:17]
[[file:~/org/PhD.org::*Meeting][Meeting]]
** learn about windowing system (e.g. X11, wayland, etc.) :windowingsystem:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** search for books on windowing system (e.g. xwindow system, wayland) the goal is to understand windowing system enough to manipulate it with my wsl2.
:LOGBOOK:
CLOCK: [2022-02-25 Fri 11:50]--[2022-02-25 Fri 11:51] =>  0:01
:END:
[2022-02-25 Fri 11:50]
** learn reverse engineer :reverseengineer:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** start reading reverse engineering book. just to get my hands on to understand what its like to do reverse engineer.
[2022-02-25 Fri 15:47]
[[file:~/org/notes/emacs/packages/tramp-note.org::*References][References]]
** learn devops tools :devops:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** read book on terraform and ansible
[2022-02-25 Fri 15:51]
[[file:~/org/notes/emacs/packages/tramp-note.org::*Tutorial][Tutorial]]
***** read hands-on Github Actions: Implement CI/CD with GitHub Action Workflows for Your applications. :devops:
[2022-02-26 Sat 23:37]
** building my own at home server
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
***** plan out how to implement my own server. including buying server and setting things up.
:LOGBOOK:
CLOCK: [2022-02-26 Sat 14:34]--[2022-02-26 Sat 14:35] =>  0:01
:END:
[2022-02-26 Sat 14:34]
[[file:~/org/todo.org::*start daily writing and reading. (checkout template that I made for roam research to used as a building block. dont reinvent the wheel, but adjust things accordingly.)][start daily writing and reading. (checkout template that I made for roam research to used as a building block. dont reinvent the wheel, but adjust things accordingly.)]]
** learn LaTeX
:LOGBOOK:
CLOCK: [2022-03-06 Sun 12:15]--[2022-03-06 Sun 12:46] =>  0:31
CLOCK: [2022-03-06 Sun 11:26]--[2022-03-06 Sun 11:43] =>  0:17
CLOCK: [2022-03-06 Sun 10:05]--[2022-03-06 Sun 11:06] =>  1:01
CLOCK: [2022-03-06 Sun 07:56]--[2022-03-06 Sun 08:27] =>  0:31
CLOCK: [2022-03-05 Sat 16:23]--[2022-03-05 Sat 16:58] =>  0:35
CLOCK: [2022-03-05 Sat 16:19]--[2022-03-05 Sat 16:23] =>  0:04
CLOCK: [2022-03-05 Sat 13:07]--[2022-03-05 Sat 13:47] =>  0:40
CLOCK: [2022-03-05 Sat 12:36]--[2022-03-05 Sat 12:48] =>  0:12
CLOCK: [2022-03-05 Sat 11:57]--[2022-03-05 Sat 12:06] =>  0:09
CLOCK: [2022-03-05 Sat 11:30]--[2022-03-05 Sat 11:57] =>  0:27
:END:
*** Notes :note:
*** Meeting :meeting:
*** Schedule
**** recurring :recurring:
**** non-recurring :nonrecurring:
*** Delegation :waiting:
*** Tasks
**** actionable :actionable:
**** incubation :incubation:
