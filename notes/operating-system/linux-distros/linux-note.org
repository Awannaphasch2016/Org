#+TITLE: Linux Note
#+hugo_base_dir: /home/awannaphasch2016/org/projects/sideprojects/website/my-website/hugo/quickstart
#+filetags: linux

* Blog :blog:
** Getting source code of distributed binary package in Ubuntu :debug:ubuntu:
:PROPERTIES:
:ID:       1c33022c-4543-4897-bc23-fae63326fd5f
:EXPORT_FILE_NAME: Getting source code of distributed binary package in Ubuntu
:END:

[[https://superuser.com/questions/388890/is-there-a-way-to-extract-the-source-code-from-deb-or-rpm-packages][This]] stack exchange post state the following.
#+BEGIN_SRC org
Debian and RPM packages don't contain source code, only the compiled result. However, you can fetch the source packages - SRPMS, or the Debian description, patch, and original tarball.
#+END_SRC

That's it. You can only download file that are provided in url where target deb file is located. Which files will be provided? Only package maintainers can determine that. Therefore, there could be a scenario where no source codes are available for download.

As an example of what could be provided, files contained in https://releases.hashicorp.com/vagrant/2.2.9/ are shown below.
#+attr_html: :width 300px
[[file:./images/screenshot_20220703_184738.png]]

With good knowledge about file extension convention, in this case, best bet to find source code is to look into zip file. Unfortunately, in this case, zip file only contains binary file of =vagrant=. Fortunately, =vagrant= is an open source and one can obtain source code from its github page, [[https://github.com/hashicorp/vagrant][here]].

Welcome to the world of software. You get what you get, so make the best of it.

Below, I will explain step by step on how to obtain source code of distributed binary package in Ubuntu.

To follow along, I will use =hello= packages in Ubuntu as an example package to download source code locally. However, any other packages available in =apt-get= can be used.

First, you need to uncomment =deb-src= in =source.list=.
#+BEGIN_SRC sh :noeval
chmod 777 /etc/apt/sources.list # change file permission from read-only to editable.
vim /etc/apt/sources.list
sed ":%s/# deb-src/deb-src/g" /etc/apt/sources.list # replace '# deb-src' with 'deb-src'
#+END_SRC
#+END_SRC

Then, you can download source code of hello packages.
#+BEGIN_SRC sh :noeval
sudo apt-get source hello
#+END_SRC

Running the above on =Ubuntu 20.04.4= will result in a known bug [fn:1]. As of [2022-07-03 Sun], I have no clue what =_apt= or  =/var/lib/update-notifier/package-data-downloads/partial/= mean.

#+BEGIN_SRC sh :noeval
sudo chown _apt /var/lib/update-notifier/package-data-downloads/partial/
#+END_SRC

The command above should download =hello= source code to current directory. Now, you can edit it as you want.

Lastly, make sure to change permission of =/etc/apt/source-list= back to readonly. I don't know about security much, but it seems to logical.

#+BEGIN_SRC sh :noeval
sudo chmod u=r,g=r,o=r /etc/apt/sources.list # change file permission from editable tto read-only
#+END_SRC

That's it.
Peace.

*** Footnotes
[fn:1] [[https://askubuntu.com/questions/954862/couldnt-be-accessed-by-user-apt-pkgacquirerun-13-permission-denied][couldn't be accessed by user '_apt'. - pkgAcquire::Run (13: Permission denied) [duplicate]â€‹]]

** Working with D-Bus in Linux's systemd. :systemd:dbud:middleware:
:PROPERTIES:
:ID:       d59c6327-76ca-4160-8b92-23e2c48aef9d
:EXPORT_FILE_NAME: Working with D-Bus in Linux's systemd.
:END:
Quoting "D-Bus integration in Emacs" [fn:5], D-Bus is defined as followed
#+name: 2047729200
#+BEGIN_QUOTE
D-Bus is an inter-process communication mechanism for applications residing on the same host. The communication is based on messages. Data in the messages is carried in a structured way, it is not just a byte stream.
#+END_QUOTE

According to [fn:5], name of client application is "a series of identifiers separated by dots", but an application can install multiple objects under its name which are represents as path like syntax -- separated by =/=. Communications to these applications are either "methods" (requests/responds) or "signals" (pub/sub). These form of communication is called "interface" of the application. Name of Interfaces is append to application's name.

To be honest, I still don't know what is the different between object and application. According to [fn:5], I see "object" (represented as path) as a way to create arbitrary name to refers to a specific application. [fn:6]

Say I want to add new client D-Bus application to add =org-clock= notification functionality in Emacs, I have to put add systemd service file at =/usr/share/dbus-1/services/=. Note that I am using Ubuntu distro on Wsl2 on Window 10. Example of the file name is =org.freedesktop.Notifications.service=. I speculate that the file is an "interface" to application named =org.freedesktop.Notifications=

In =org.freedesktop.Notifications.service=, I wrote
#+BEGIN_SRC md
[D-BUS Service]
Name=org.freedesktop.Notifications
Exec=/usr/lib/notification-daemon/notification-daemon
#+END_SRC


That's it.


Peace.


~milfex-lostex

*** Footnotes
[fn:5] https://www.gnu.org/software/emacs/manual/html_mono/dbus.html#Overview
[fn:6] this works like =wire= in Urbit's Gall application.



* Command line
** Reference
*** "command line pandas killer" (mlr, q, csvtk, xsv, tsv-utils), see [[https://github.com/xvzftube/pandas_killers/blob/main/main.sh][here]].
** ls
*** what is the meaning of read column output
- ref
  - [[https://unix.stackexchange.com/questions/103114/what-do-the-fields-in-ls-al-output-mean][What do the fields in ls -al output mean?]]

#+BEGIN_SRC txt
-rwxrw-r--    1    root   root 2048    Jan 13 07:11 afile.exe
#+END_SRC

- file permissions (-rwxrw-r--),
- number of (hard) links (1),
- owner name (root),
- owner group (root),
- file size in bytes (2048),
- time of last modification (Jan 13 07:11), and
- file/directory name (afile.exe)
** timer
#+BEGIN_SRC sh :results raw
time find . -name "*.scala"
#+END_SRC

#+RESULTS:

CPU (0avgtext+0avgdata 3300maxresident)k
0inputs+0outputs (0major+150minor)pagefaults 0swaps
** kpsewhich (Karl's Path SEarch Library WHICH)
- ref
  - [[https://tex.stackexchange.com/questions/492093/what-does-kpsewhich-stand-for][What does kpsewhich stand for?]]
As info kpathsea says (online manual here), Kpathsea is a library for path searching (e.g., for very quickly locating a given .sty file in a set of potentially large TEXMF trees, without doing a recursive directory tree traversal every time a given file is needed; this is important when compiling LaTeX documents using several packages, themselves requiring other packages, possibly various font files, etc.).* Environment variables
** curl
note: -d is used when "key" is in the body of json. (as compared to url string query paramter)
#+BEGIN_SRC sh
curl -v -X POST \
  'https://r275xc9bmd.execute-api.us-east-1.amazonaws.com/test/helloworld?name=John&city=Seattle' \
  -H 'content-type: application/json' \
  -H 'day: Thursday' \
  -d '{ "time": "evening" }'
#+END_SRC

** list of helper commands
*** whereis vs which
=whereis= searches for "possibly useful" files, while =which= only searches for executables.

run =whatis= result on the two command, we get the following
#+BEGIN_SRC sh
whatis which
#+END_SRC

#+RESULTS:
: which (1)            - locate a command

#+BEGIN_SRC sh
whatis whereis
#+END_SRC

#+RESULTS:
| whereis (1)          - locate the binary | source | and manual page files for a command |

*** whatis
provide tldr description of target command.
#+BEGIN_SRC sh
whatis which
#+END_SRC

#+RESULTS:
|                                         |
| which (1)            - locate a command |
** xclip
:PROPERTIES:
:ID:       387b7972-0e39-43fd-a967-20dfa4437b52
:END:

* How to
** create zip file of content in current file
#+BEGIN_SRC sh
zip -r zipfolder.zip .
#+END_SRC
* Environment Variables

** PS
- ref
  - https://access.redhat.com/solutions/505983
*** Prompt is control via a special shell variable. You need to set PS1, PS2, PS3 and PS4 variable.
*** **PS1** - The value of this parameter is expanded and used as the primary prompt string. The default value is \u@\h \W\\$ .
*** **PS2** - The value of this parameter is expanded as with PS1 and used as the secondary prompt string. The default is ]
*** **PS3** - The value of this parameter is used as the prompt for the select command
*** **PS4** - The value of this parameter is expanded as with PS1 and the value is printed before each command bash displays during an execution trace. The first character of PS4 is replicated multiple times, as necessary, to indicate multiple levels of indirection. The default is +
** TERM
*** The TERM environment variable is used for terminal handling. It lets DB-Access (and other character-based applications) recognize and communicate with the terminal that you are using.
***  $TERM is read and interpreted by the terminfo system. terminfo also refers to the database of terminal descriptions which you can find on most systems in /usr/share/terminfo . $TERM must match one of the entries in that database.
* Compare
** kpsewhich vs which
:PROPERTIES:
:ID:       e5558bd3-3496-4c62-a168-a14598b9fe11
:END:
- ref
  - [[https://tex.stackexchange.com/questions/492093/what-does-kpsewhich-stand-for][What does kpsewhich stand for?]]
The comparison between which and kpsewhich goes further than that. As Unix shells often maintain a cache of executables present in directories of the PATH in order to offer efficient lookup for command completion, the Kpathsea library maintains a filename database (comprised of the ls-R files in each TEXMF tree) in order to offer similar fast lookup to TeX-related programs.

In Unix shells, the cache can often be updated with a hash command (hash -r in Bash, rehash in Zsh) when you've added or removed executables from your PATH and wish to refresh the cache without restarting your shell; for the Kpathsea library, the corresponding operation is done with mktexlsr, also known as texhash.

Finally, which looks up a given executable in the directories listed in PATH1, in some way similarly as kpsewhich for finding a TeX-related file using either on-disk lookup or only the filename database (it depends on whether the TEXMF tree is preceded with !! where it is used in texmf.cnf2). kpsewhich is more sophisticated than a typical which builtin, though, as it can return different results depending on what was given as -progname, has a notion of variables that can be set in texmf.cnf, can look up in-cache-only or on-disk depending on the per-directory-settings in texmf.cnf, etc.* FAQs
