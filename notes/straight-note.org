#+title: Straight Note
#+hugo_base_dir: /home/awannaphasch2016/org/projects/sideprojects/website/my-website/hugo/quickstart
#+filetags: straight package-manager

* Blog :blog:
** Comparison of straight.el to other Emacs package manager. :straight:package_manager:
:PROPERTIES:
:EXPORT_FILE_NAME: Comparison of straight.el to other Emacs package manager.
:END:
This article is an opinion piece on [[https://github.com/radian-software/straight.el#comparison-to-other-package-managers][Comparison to other package managers]].

Emacs package manager are split into 2 categories: package.el wrapper or not package.el wrapper.

One idea that =straight.el= emphasizes a lot is that =straight.el= manages commits rather than managing a whole a package. Some PM only accept latest commit. Other only accepts repo on github etc. I call this design decision a "smallest unit of design implementation."

Other unique takes on managing Emacs packages are Borg (assimilates packages as Git submodules into .emacs.d).

That's it.
peace.

** A Note On Straight.el's Transaction
:PROPERTIES:
:EXPORT_FILE_NAME: A Note On Straight.el's Transaction
:END:

This article is based on [[https://github.com/radian-software/straight.el#comparison-to-el-get][staright.el README]] which at the moment doesn't have written document on how transaction works. So This is a work in progress until I either read =straight.el= codebase or summarize its documentation.

Conceptually, =stright.el= clones Git repo and them symlinking files into Emacs's load path. A packages in =straight.el= is defined as =recipe= as a files which was symlinked together. I have an article on recipe.

=straight.el= runs =straight-use-package= during the Emacs initialization to check for package to be updated.
Now, straight has information of what package to be downloaded. user can choose to install whatever packages after Emacs has been launched.

=straight.el= introduce =transaction= concept which provide a way to keep track of things that happens when an operation is executed.

Packages in your emacs configuration (=config.el=?) are passed to =straight-use-package= to be managed. This process is done during loading of your init-file (=init.el=).

Note that there are two ways to load package into =straight.el=. First, =straight.el= is passed packages upon the loading =init.el=. The second way is when one want to try a package, so one decided to manually evaluate =straight-use-package= after emacs has been launched.

How can =straight.el= distinguish between the two?

 =straight.el= determines whether packages is part of your =init.el= by reload =init.el=. This implies that =straight.el= should know when the file is evaluated. As of [2022-06-22 Wed], I think knowing when file is done evaluated is important because the following: imagine a scenario where package is loaded while init.el is evaluated, one can't tell the name of packages that has been loaded after emacs initialized. One can take the approach of =package.el= by storing mutable state outside of =config.el= inside =jk:package.el= (which is loaded as part of emacs initialization), however, the main selling point of =straight.el= is be passed packages directly to =staright-use-package= while init.el is loaded.

=straight.el= has =transaction system= which can determine when init-file is finished loading by using =post-command-hook= which only execute code after =interactive operation= has finished. More abstractly, =straight.el= introduces transaction concept to keep track of an operation as a unit where, in this case, an =operation= is defined as =evaluating a file=.

=staright.el= will determine which and how to packages whenever =straight-use-package= is invoked. This is because internal state of =straight.el= is managed by =straight-use-package= and internal state can always be change when =staright-use-package= is invoked.

** A Note On Straight's Recipe. :recipe:straight:package_manager:
:PROPERTIES:
:EXPORT_FILE_NAME: A Note On Straight's Recipe
:END:

Straight's recipe is similar but not identify to one used by MELPA. [fn:1]

A =recipe= describes which local repository to link the files from and how to clone that repository, if repo is not found locally. With this definition of recipe, one can think of recipe as a build step (=recipe=) of a package.

Ultimately, a package is defined is a collection of files required for package's build. =striaght.el= views a package in this manner. As a result, =straight.el= tries to get away from definition package as a folder (e.g. Git repo or an entry in MELPA). Note that folder itself is also defined as a collection of file that share same root directory. Some would argue that folder can be composed of symlink. Allowing symlink, folder is a subset of a package because all files in folder may not required for package's build. That's it =straight.el= use symlink internally.

There are 2 types of recipe: fetch recipe and build recipe.

As the name suggested, =build recipe= is =recipe= for build. Using definition of =recipe=, =build recipe= is a recipe that describe local source and local destination of symlink relevant to succesfully build a package. It is composed of 3 properties: =:files=, =:local-repo=, and =:build=. symlink is created from =:files= to point to =:local-repo=. After symlinks are created, the target files are byte-compile and store in =:local-repo=. When local files are missing, =fetch recipe= will be used to fetch files from git repo, hosted online ,such as Github. It is composed of 5 properties: =:repo=, =:host=, =:branch=, =:nonrecursive=, =:fork=, =:protocol=.

See ref:straight_dir for visualization straight directory. Note that only =.el= files are symlinked, since only they are relevant to Emacs to build.

#+name: straight_dir
#+BEGIN_SRC md
straight
├── build
│   ├── el-patch
│   │   ├── el-patch-autoloads.el
│   │   ├── el-patch.el -> ~/.emacs.d/straight/repos/el-patch/el-patch.el
│   │   └── el-patch.elc
│   └── straight
│       ├── straight-autoloads.el
│       ├── straight.el -> ~/.emacs.d/straight/repos/straight.el/straight.el
│       └── straight.elc
└── repos
    ├── el-patch
    │   ├── CHANGELOG.md
    │   ├── LICENSE.md
    │   ├── README.md
    │   └── el-patch.el
    └── straight.el
        ├── LICENSE.md
        ├── Makefile
        ├── README.md
        ├── bootstrap.el
        ├── install.el
        └── straight.el
#+END_SRC

Note that collection of recipes are contained in recipe repositories which is implemented as a regular package (collection of dependent files). The recipe repository backends abstract over the formatting differences in different recipe sources to translate recipes into the uniform format used by straight.el. When you run M-x straight-get-recipe, the translated recipe is what is returned. [fn:1]

*** What recipe doesn't get right.
As far as I am concerned, =straight.el= follows informal guideline by package manager developer [[cite:&boyer2016package]] which requires that a package manage dependencies based on information from 4 states including project code, manifest file, lock file, and dependencies. =straight.el= =recipe= is an implementation of manifest like functionality. One thing that =straight.el= doesn't follow is that =lockfile= is written by human to overwrite =fetch recipe=. One downfalls of this is there is no way to confirm that the package manager use dependencies you are intended. Boyer cite:&boyer2016package states that lockfile should generate by machine as a confirmation of what dependencies it uses. As of [2022-06-22 Wed], I can't think of a scenario that require one to edit lockfile to overwrite =recipe=. I need to use it more to have creditable opinion to critique further.

Lastly, =straight.el= should allow for "local recipe" which can be loaded to overwrite "original recipe." Not sure how useful will this be, but it seems to be quit useful for testing different version of packages while using Emacs.

*** Conclusion
Last few word from me before signing off. After reading through, I get this feeling that =straight.el= obviously does what "package manager" should do in general. Whenever I have a feeling of "obviously x", there is an "internal signal" in me that says "its obvious because you don't know what have been done." I will leave this question to be explored in the future. For now, best I can do is to be curious on whether "internal signal" is any good.

That's it.
Peace.

*** Footnotes
[fn:1] [[https://github.com/radian-software/straight.el#the-recipe-format][The staright's recipe format]]
*** Bibliography :ignore:
bibliography:/home/awannaphasch2016/org/papers/org-mode-bibtex.bib
